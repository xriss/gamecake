{
 "_dirname": "{_root}docs/lua.wetgenes.grd",
 "_docs": [
  {
   "count": 7,
   "name": "code"
  },
  {
   "count": 6,
   "name": "code.swankyquant"
  },
  {
   "count": 1,
   "name": "code.swankyquant.algorithm"
  },
  {
   "count": 1,
   "name": "code.swankyquant.color_distance"
  },
  {
   "count": 1,
   "name": "code.swankyquant.color_distance_weight"
  },
  {
   "count": 1,
   "name": "code.swankyquant.swanky_quant"
  },
  {
   "count": 1,
   "name": "code.swankyquant.swanky_quant_remap"
  },
  {
   "count": 520,
   "name": "lua"
  },
  {
   "count": 5,
   "name": "lua.glslang"
  },
  {
   "count": 1,
   "name": "lua.glslang.lint_gles2"
  },
  {
   "count": 1,
   "name": "lua.glslang.parse_chunks"
  },
  {
   "count": 1,
   "name": "lua.glslang.replace_include"
  },
  {
   "count": 1,
   "name": "lua.glslang.yank_shader_versions"
  },
  {
   "count": 514,
   "name": "lua.wetgenes"
  },
  {
   "count": 26,
   "name": "lua.wetgenes.bullet"
  },
  {
   "count": 25,
   "name": "lua.wetgenes.bullet.world"
  },
  {
   "count": 13,
   "name": "lua.wetgenes.bullet.world.body"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.active"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.angular_factor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.angular_velocity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.ccd"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.custom_material_callback"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.damping"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.factor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.friction"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.restitution"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.transform"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.body.velocity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.get"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.gravity"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.bullet.world.mesh"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.mesh.destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.ray_test"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.set"
  },
  {
   "count": 3,
   "name": "lua.wetgenes.bullet.world.shape"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.shape.destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.shape.margin"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.bullet.world.step"
  },
  {
   "count": 64,
   "name": "lua.wetgenes.chipmunk"
  },
  {
   "count": 4,
   "name": "lua.wetgenes.chipmunk.arbiter"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.arbiter.ignore"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.arbiter.points"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.arbiter.surface_velocity"
  },
  {
   "count": 16,
   "name": "lua.wetgenes.chipmunk.body"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.angle"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.angular_velocity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.apply_force"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.apply_impulse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.center_of_gravity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.force"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.mass"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.moment"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.position"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.position_func"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.shape"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.torque"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.type"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.velocity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.body.velocity_func"
  },
  {
   "count": 6,
   "name": "lua.wetgenes.chipmunk.constraint"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.constraint.collide_bodies"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.constraint.error_bias"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.constraint.impulse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.constraint.max_bias"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.constraint.max_force"
  },
  {
   "count": 11,
   "name": "lua.wetgenes.chipmunk.shape"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.bounding_box"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.collision_type"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.elasticity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.filter"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.friction"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.query_point"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.query_segment"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.radius"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.sensor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.shape.surface_velocity"
  },
  {
   "count": 26,
   "name": "lua.wetgenes.chipmunk.space"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.add_handler"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.body"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.collision_bias"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.collision_persistence"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.collision_slop"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.constraint"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.contains"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.current_time_step"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.damping"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.gravity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.idle_speed_threshold"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.iterations"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.locked"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.query_bounding_box"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.query_point"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.query_point_nearest"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.query_segment"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.query_segment_first"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.query_shape"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.reindex"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.remove"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.sleep_time_threshold"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.step"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.chipmunk.space.type"
  },
  {
   "count": 8,
   "name": "lua.wetgenes.csv"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.csv.build"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.csv.doesc"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.csv.doquote"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.csv.map"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.csv.parse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.csv.unesc"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.csv.unquote"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.deepcopy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.export"
  },
  {
   "count": 126,
   "name": "lua.wetgenes.gamecake"
  },
  {
   "count": 43,
   "name": "lua.wetgenes.gamecake.fun"
  },
  {
   "count": 19,
   "name": "lua.wetgenes.gamecake.fun.chatdown"
  },
  {
   "count": 6,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chat"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chat.get_tag"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chat.replace_tags"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chat.set_tag"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chat.set_tags"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chat.set_topic"
  },
  {
   "count": 7,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chats"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chats.changes"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chats.get_subject"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chats.get_tag"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chats.replace_tags"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chats.set_subject"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.chats.set_tag"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.dotnames"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.parse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.setup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.setup_chat"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.chatdown.text"
  },
  {
   "count": 23,
   "name": "lua.wetgenes.gamecake.fun.yarn"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.cells"
  },
  {
   "count": 14,
   "name": "lua.wetgenes.gamecake.fun.yarn.items"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.cells"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.create"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.create_pages"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.find"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.get_big"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.insert"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.iterate_dotnames"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.iterate_parents"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.metatable"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.prefabs"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.remove"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.items.rules"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.pages"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.gamecake.fun.yarn.prefabs"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.prefabs.set"
  },
  {
   "count": 4,
   "name": "lua.wetgenes.gamecake.fun.yarn.rules"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.rules.apply"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.rules.can"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.fun.yarn.rules.set"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.gamecake.oven"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.oven.bake"
  },
  {
   "count": 57,
   "name": "lua.wetgenes.gamecake.widgets"
  },
  {
   "count": 3,
   "name": "lua.wetgenes.gamecake.widgets.button"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.button.setup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.button.update"
  },
  {
   "count": 3,
   "name": "lua.wetgenes.gamecake.widgets.center"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.center.layout"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.center.setup"
  },
  {
   "count": 4,
   "name": "lua.wetgenes.gamecake.widgets.checkbox"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.checkbox.class_hooks"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.checkbox.setup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.checkbox.update"
  },
  {
   "count": 17,
   "name": "lua.wetgenes.gamecake.widgets.data"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.add_class_hook"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.call_hook"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.call_hook_later"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_dec"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_get_pos"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_get_size"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_inc"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_set"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_snap"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_tonumber"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_tonumber_from_list"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_tostring"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_tostring_from_list"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.data_value"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.del_class_hook"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.data.new_data"
  },
  {
   "count": 12,
   "name": "lua.wetgenes.gamecake.widgets.datas"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.del"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.get"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.get_number"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.get_string"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.get_value"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.new_datas"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.set"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.set_infos"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.set_string"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.datas.set_value"
  },
  {
   "count": 7,
   "name": "lua.wetgenes.gamecake.widgets.defs"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.defs.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.defs.add_border"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.defs.copy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.defs.create"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.defs.reset"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.defs.set"
  },
  {
   "count": 5,
   "name": "lua.wetgenes.gamecake.widgets.dialogs"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.dialogs.hide_overlay"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.dialogs.setup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.dialogs.show"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.dialogs.show_overlay"
  },
  {
   "count": 4,
   "name": "lua.wetgenes.gamecake.widgets.drag"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.drag.drag"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.drag.setup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.drag.update"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.widgets.setup"
  },
  {
   "count": 23,
   "name": "lua.wetgenes.gamecake.zone"
  },
  {
   "count": 20,
   "name": "lua.wetgenes.gamecake.zone.scene"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.call"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.caste"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.find_uid"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.forget_uid"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.generate_uid"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.get"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.manifest"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.remember_uid"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.remove"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.reset"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.set"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.sortby_update"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.status"
  },
  {
   "count": 4,
   "name": "lua.wetgenes.gamecake.zone.scene.systems"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.systems.call"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.systems.insert"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.systems.remove"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.scene.uids"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.gamecake.zone.system"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.gamecake.zone.system.items"
  },
  {
   "count": 37,
   "name": "lua.wetgenes.grd"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.adjust_contrast"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.adjust_hsv"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.adjust_rgb"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.attr_redux"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.blit"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.clear"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.clip"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.convert"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.copy_data"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.copy_data_layer"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.create"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.create_convert"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.create_normal"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.duplicate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.fillmask"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.flipx"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.flipy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.info"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.load"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.load_data"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.load_file"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.paint"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.palette"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.pixels"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.quant"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.remap"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.reset"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.resize"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.save"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.scale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.shrink"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.slide"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.sort_cmap"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.stream"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grd.xor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grdcanvas"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.grdhistory"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grdhistory.history"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grdlayers"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grdpaint"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.grdsvg"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.grdsvg.string"
  },
  {
   "count": 3,
   "name": "lua.wetgenes.json"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.json.decode"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.json.encode"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.lookup"
  },
  {
   "count": 15,
   "name": "lua.wetgenes.midi"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.clients"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.create"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.event_to_string"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.get"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.peek"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.port_create"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.port_destroy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.pull"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.push"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.set"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.string_to_clientport"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.subscribe"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.midi.unsubscribe"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.package"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.package.reload"
  },
  {
   "count": 15,
   "name": "lua.wetgenes.path"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.currentdir"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.dir"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.ext"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.folder"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.join"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.name"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.normalize"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.parent"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.parse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.relative"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.resolve"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.root"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.setup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.path.split"
  },
  {
   "count": 4,
   "name": "lua.wetgenes.plate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.plate.replace_lookup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.plate.replace_lookup_istable"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.plate.table_lookup"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.rnd64k"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.safecall"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.safewrap"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.set_env"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.snippets"
  },
  {
   "count": 3,
   "name": "lua.wetgenes.spew"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.spew.connect"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.spew.test"
  },
  {
   "count": 149,
   "name": "lua.wetgenes.tardis"
  },
  {
   "count": 31,
   "name": "lua.wetgenes.tardis.array"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.__add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.__div"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.__eq"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.__mul"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.__sub"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.__tostring"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.__unm"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.abs"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.acos"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.asin"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.atan"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.ceil"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.compare"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.cos"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.exp"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.floor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.fract"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.log"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.max"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.min"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.mix"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.pow"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.product"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.scalar"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.set"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.sin"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.sub"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.tan"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.array.zero"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.class"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.tardis.line"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.line.new"
  },
  {
   "count": 10,
   "name": "lua.wetgenes.tardis.m2"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.adjugate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.cofactor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.determinant"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.identity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.inverse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.minor_xy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.scale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m2.transpose"
  },
  {
   "count": 12,
   "name": "lua.wetgenes.tardis.m3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.adjugate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.cofactor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.determinant"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.identity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.inverse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.m4"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.minor_xy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.scale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.transpose"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m3.v3"
  },
  {
   "count": 32,
   "name": "lua.wetgenes.tardis.m4"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.adjugate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.arotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.cofactor"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.determinant"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.get_scale_v3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.identity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.inverse"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.lerp"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.m3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.minor_xy"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.prearotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.preqrotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.prerotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.prerrotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.prescale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.pretranslate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.pretranslate_v3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.qrotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.rotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.rrotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.scale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.scale_v3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.setrot"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.setrrot"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.sub"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.translate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.translate_v3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.transpose"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4.v3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.m4_stack"
  },
  {
   "count": 2,
   "name": "lua.wetgenes.tardis.plane"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.plane.new"
  },
  {
   "count": 11,
   "name": "lua.wetgenes.tardis.q4"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.identity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.lerp"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.prerotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.prerrotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.rotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.rrotate"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.set"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.setrot"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.q4.setrrot"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.smoothstep"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.step"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.type"
  },
  {
   "count": 14,
   "name": "lua.wetgenes.tardis.v2"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.cross"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.distance"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.dot"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.identity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.len"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.lenlen"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.mul"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.normalize"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.oo"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.scale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v2.sub"
  },
  {
   "count": 15,
   "name": "lua.wetgenes.tardis.v3"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.angle"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.cross"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.distance"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.dot"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.identity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.len"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.lenlen"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.mul"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.normalize"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.oo"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.scale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v3.sub"
  },
  {
   "count": 14,
   "name": "lua.wetgenes.tardis.v4"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.add"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.distance"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.dot"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.identity"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.len"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.lenlen"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.mul"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.new"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.normalize"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.oo"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.scale"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.sub"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tardis.v4.to_v3"
  },
  {
   "count": 22,
   "name": "lua.wetgenes.tasks"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.add_id"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.add_memo"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.add_task"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.add_thread"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.client"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.client_code"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.create"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.create_colinda"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.del_id"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.del_memo"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.del_task"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.del_thread"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.delete"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.http"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.http_code"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.receive"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.run_task"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.send"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.sqlite"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.sqlite_code"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tasks.update"
  },
  {
   "count": 5,
   "name": "lua.wetgenes.tsv"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tsv.close"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tsv.create"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tsv.flush"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.tsv.load"
  },
  {
   "count": 19,
   "name": "lua.wetgenes.txt"
  },
  {
   "count": 5,
   "name": "lua.wetgenes.txt.diff"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.diff.find"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.diff.match"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.diff.split"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.diff.trim"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.lex"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.lex_js"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.lex_lua"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.undo"
  },
  {
   "count": 9,
   "name": "lua.wetgenes.txt.utf"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.char"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.charpattern"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.chars"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.length"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.map_latin0_to_unicode"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.map_unicode_to_latin0"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.size"
  },
  {
   "count": 1,
   "name": "lua.wetgenes.txt.utf.string"
  }
 ],
 "_docs_json": {
  "dirname": "{_root}docs",
  "dirs": {
   "../../lua": "",
   "../../lua_grd": ""
  },
  "ignore": {
   "node_modules": true
  },
  "urlprefix": {
   "../": "https://github.com/xriss/gamecake/blob/master/"
  }
 },
 "_filename": "{_root}docs/lua.wetgenes.grd/index.html",
 "_flags": {
  "body": {
   "trim": "ends"
  },
  "css": {
   "same": "append"
  },
  "head": {
   "trim": "ends"
  },
  "html": {
   "trim": "ends"
  },
  "menuwrap": {
   "trim": "ends"
  },
  "menuwrap_link": {
   "trim": "ends"
  },
  "menuwrap_link1": {
   "trim": "ends"
  },
  "menuwrap_link2": {
   "trim": "ends"
  },
  "title": {
   "trim": "ends"
  }
 },
 "_list": [
  {
   "body": "<pre><code>local wgrd=require(&quot;wetgenes.grd&quot;)\n</code></pre>\n<p>We use wgrd as the local name of this library.</p>\n<p>Handle bitmap creation, loading, saving and blitting. The bitmap and \nthe colormap for indexed bitmaps are represented by the same data \nstructure which describes a continuous chunk of memory with optional \nability to select an area of a larger chunk using simple byte spans.</p>\n<p>Swanky Paint uses this to manage its bitmaps and its also used to \nconvert art into data at build time for use in the GameCake engine. The \nPageCake engine uses this for image management, creating live thumbnails \nand so on.</p>\n<p>We load and save jpeg, png and gif. The png lib contains extensions for \napng which allows animation chunks. Animations are contained in the Z \n(depth) dimension of the grd.</p>\n<p>The following are possible format options that we support. Most of them \nare OpenGL friendly.</p>\n<pre><code>wgrd.FMT_U8_RGBA\n</code></pre>\n<p>32 bits per pixel with a byte order of red, green, blue, alpha and a \nlittle endian U32 of ABGR. We prefer this byte order because OpenGL.</p>\n<pre><code>wgrd.FMT_U8_ARGB\n</code></pre>\n<p>32 bits per pixel with a byte order of alpha, red, green, blue and a \nlittle endian U32 of BGRA.</p>\n<pre><code>wgrd.FMT_U8_RGB\n</code></pre>\n<p>24 bits per pixel with a byte order of red, green, blue.</p>\n<pre><code>wgrd.FMT_U8_INDEXED\n</code></pre>\n<p>8 bits per pixel which indexes a wgrd.FMT_U8_RGBA palette.</p>\n<pre><code>wgrd.FMT_U8_LUMINANCE\n</code></pre>\n<p>8 bits per pixel, grey scale only.</p>\n<pre><code>wgrd.FMT_U8_ALPHA\n</code></pre>\n<p>8 bits per pixel, alpha only.</p>\n<pre><code>wgrd.FMT_U16_RGBA_5551\n</code></pre>\n<p>16 bits per pixel with 5 bits each of red,green,blue and 1 bit of alpha \npacked into a single U16.</p>\n<pre><code>wgrd.FMT_U16_RGBA_4444\n</code></pre>\n<p>16 bits per pixel with 4 bits each of red,green,blue,alpha packed into \na single U16.</p>\n<pre><code>wgrd.FMT_U16_RGBA_5650\n</code></pre>\n<p>16 bits per pixel with 4 bits of red, 5 bits of green and 4 bits of \nblue packed into a single U16.\n<br/>\n<br/></p>\n<pre><code>wgrd.FMT_U8_RGBA_PREMULT\nwgrd.FMT_U8_ARGB_PREMULT\nwgrd.FMT_U8_INDEXED_PREMULT\nwgrd.FMT_U16_RGBA_5551_PREMULT\nwgrd.FMT_U16_RGBA_4444_PREMULT\nwgrd.FMT_U16_RGBA_5650_PREMULT\n</code></pre>\n<p>Are all just pre-multiplied alpha versions of the base format described \nabove.</p>\n<p>Check this link out for why pre-multiplied alpha is a good idea for any \nimage that will be used as a texture \n<a href=\"http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx\">http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx</a>\n<br/>\n<br/></p>\n<pre><code>wgrd.GRD_FMT_HINT_PNG\nwgrd.GRD_FMT_HINT_JPG\nwgrd.GRD_FMT_HINT_GIF\n</code></pre>\n<p>These are used to choose a specific file format when loading or saving.</p>\n",
   "count": 37,
   "file": "../lua_grd/code/grd.lua",
   "line": 6,
   "name": "lua.wetgenes.grd",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga:adjust_contrast(sub,con)\n</code></pre>\n<p>sub is the middle grey value, probably 127, and con is the amount of \ncontrast.</p>\n<p>A con of 0 should have no effect, a con of -1 will be a flat grey and a \ncon of 1 will give a huge contrast increase.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1120,
   "name": "lua.wetgenes.grd.adjust_contrast",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga:adjust_hsv(hue,saturation,value)\n</code></pre>\n<p>Add hue and adjust -1 to +1 in for saturation and value.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1107,
   "name": "lua.wetgenes.grd.adjust_hsv",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga:adjust_rgb(red,green,blue)\n</code></pre>\n<p>Adjust -1 to +1 in for each RGB component.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1094,
   "name": "lua.wetgenes.grd.adjust_rgb",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:attr_redux(cw,ch,num,sub,bak)\n</code></pre>\n<p>Perform attribute clash simulation on an indexed image.</p>\n<p>cw,ch are the width and height of each character we are simulating, 8x8 \nis the right size for spectrum attrs but could be 4x8 for c64 multicolor \nmode.</p>\n<p>num is the number of colors allowed within this area, so 2 for spectrum mode.</p>\n<p>sub is the size of sub pallete groups, eg 16 in nes mode or 8 in \nspectrum mode, EG bright simulation in spectrum mode requires all \ncolors in a attr block to be from the bright palette or the dark \npalette no mixing so this forces that grouping. Set to 0 or 256 and \nthis restriction will be disabled.</p>\n<p>bak is the index of the background color that is shared across all \ncharacters, set to -1 if there is no shared background color.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 609,
   "name": "lua.wetgenes.grd.attr_redux",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:blit(gb,x,y,cx,cy,cw,ch)\n</code></pre>\n<p>Blit a 2D area from one grd into another.</p>\n<p>gb is the grd to blit from.</p>\n<p>x,y is the location to blit too.</p>\n<p>cx,cy,cw,ch is a clip area that should be applied to gb before it is \nblitted. EG to specify an area within gb. If not provided it will \ndefault to the entirety of gb,</p>\n<p>g (destination) must be FMT_U8_RGBA and gb (source) must be \nFMT_U8_RGBA_PREMULT this function will blend the images using normal \nalpha blending.</p>\n<p>This is not overly optimised but should be reasonably fast.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 854,
   "name": "lua.wetgenes.grd.blit",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:clear(color)\n</code></pre>\n<p>Fill this grd with a single color, the color passed in depends on the \nformat of the grd, it could be an index value for 8bit images or a \n32bit value for rgba images.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 575,
   "name": "lua.wetgenes.grd.clear",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>gr=g:clip(x,y,z,w,h,d)\n</code></pre>\n<p>create a clipped window into this grd</p>\n<p>the actual data is still stored in the original, so any changes there will effect the newly returned grd</p>\n<p>x,y,z are the staring pixel and w,h,d are the width height and depth in pixels.</p>\n<p>If you intend to use this clipped area for an extended period of time then you should duplicate this grd once you do this.</p>\n<p>This returns a new grd with gr.parent set to g (the original grd)</p>\n<p>This is a very shallow dangerous copy and should only really be used for temporary actions.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 995,
   "name": "lua.wetgenes.grd.clip",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:convert(fmt)\n</code></pre>\n<p>Convert this grd to a new format, eg start with an 8 bit indexed grd \nand convert it to 32 bit like by passing in wgrd.FMT_U8_RGBA as the fmt.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 540,
   "name": "lua.wetgenes.grd.convert",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:copy_data(gb)\n</code></pre>\n<p>Copy all of the bitmap data from gb into g.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 972,
   "name": "lua.wetgenes.grd.copy_data",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:copy_data_layer(gb,z,zb)\n</code></pre>\n<p>Copy one layer (frame) of the bitmap data from gb into g. z is the \ndepth of the layer to copy into zb is the depth of the layer to copy \nfrom.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 982,
   "name": "lua.wetgenes.grd.copy_data_layer",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga=wgrd.create(gb)\n</code></pre>\n<p>Duplicate the grd.</p>\n<pre><code>ga=wgrd.create(format,width,height,depth)\n</code></pre>\n<p>Create a grd in the given format with the given width height and depth. </p>\n<pre><code>ga=wgrd.create(filename,opts)\n</code></pre>\n<p>Load an image from the file system.</p>\n<pre><code>ga=wgrd.create()\n</code></pre>\n<p>Create a blank grd of 0 dimensions.</p>\n<p>This is usually the only wgrd function you would need to call as once you \nhave a grd you can use the : calling convention to modify it. The other \nfunctions will be shown as examples using the : calling convention.</p>\n<pre><code>wgrd.create():load(opts)\n</code></pre>\n<p>For instance could be used if you wish to perform a more esoteric load \nthan from the file system.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns a grd object.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 278,
   "name": "lua.wetgenes.grd.create",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:create_convert(fmt)\n</code></pre>\n<p>Like convert but returns a new grd rather than converting in place.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 560,
   "name": "lua.wetgenes.grd.create_convert",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>gr=g:create_normal()\n</code></pre>\n<p>convert a greyscale height map  into an rgb normal map using the sobel filter.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1028,
   "name": "lua.wetgenes.grd.create_normal",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:destroy()\n</code></pre>\n<p>Free the grd and associated memory. This will of course be done \nautomatically by garbage collection but you can force it explicitly \nusing this function.\n    </p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 356,
   "name": "lua.wetgenes.grd.destroy",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga = g:duplicate()\n</code></pre>\n<p>Create a duplicate of this grd and return it.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 526,
   "name": "lua.wetgenes.grd.duplicate",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga:fillmask(gb,seedx,seedy)\n</code></pre>\n<p>Fill gb with a fillmask version of ga that starts the floodfill at \nseedx,seedy</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1149,
   "name": "lua.wetgenes.grd.fillmask",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:flipx()\n</code></pre>\n<p>This function flips the image reversing the x axis.\n    </p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 785,
   "name": "lua.wetgenes.grd.flipx",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:flipy()\n</code></pre>\n<p>This function flips the image reversing the y axis.</p>\n<p>Some image formats and rendering engines like to use upside down images \nso this is rather useful.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 769,
   "name": "lua.wetgenes.grd.flipy",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:info()\n</code></pre>\n<p>This function looks at the userdata stored in g[0] and fills in the g \ntable with its values. So it refreshes the width height etc values to \nreflect any changes. This should not need to be called explicitly as it \nis called whenever we change anything.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 839,
   "name": "lua.wetgenes.grd.info",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:load(opts)\n</code></pre>\n<p>Load an image from memory or file system depending on settings in opts.</p>\n<pre><code>opts.fmt\n</code></pre>\n<p>Lets you choose an image format, the strings &quot;jpg&quot;,&quot;png&quot; or &quot;gif&quot; will \nbe converted to the appropriate wgrd.FMT_HINT_* value.</p>\n<pre><code>opts.data\n</code></pre>\n<p>Flags this as a load from memory and provides the data string to load \nfrom.</p>\n<pre><code>opts.filename\n</code></pre>\n<p>Flags this as a load the file system and provides the file name to \nopen.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 414,
   "name": "lua.wetgenes.grd.load",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:load_data(datastring,format)\n</code></pre>\n<p>Load an image from memory.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 400,
   "name": "lua.wetgenes.grd.load_data",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:load_file(filename,format)\n</code></pre>\n<p>Load an image from the file system.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.\n </p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 386,
   "name": "lua.wetgenes.grd.load_file",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:paint(gb,x,y,cx,cy,cw,ch,mode,trans,color)\n</code></pre>\n<p>Blit a 2D area from one grd into another using dpaint style paint modes.</p>\n<p>Both grids must be indexed - FMT_U8_INDEXED</p>\n<p>gb is the grd to blit from.</p>\n<p>x,y is the location to blit too.</p>\n<p>cx,cy,cw,ch is a clip area that should be applied to gb before it is \nblitted. EG to specify an area within gb. If not provided it will \ndefault to the entirety of gb,</p>\n<p>mode is one of the following</p>\n<pre><code>PAINT_MODE_TRANS\n</code></pre>\n<p>Skip the transparent color.</p>\n<pre><code>GRD_PAINT_MODE_COLOR\n</code></pre>\n<p>Skip the transparent color and make every solid pixel the same color.</p>\n<pre><code>GRD_PAINT_MODE_COPY\n</code></pre>\n<p>Copy the entire area.</p>\n<pre><code>GRD_PAINT_MODE_XOR\n</code></pre>\n<p>XOR the values. (Can be used to find differences in an image)</p>\n<pre><code>GRD_PAINT_MODE_ALPHA\n</code></pre>\n<p>Skip the transparent colors as defined in the palette.\n<br/>\n<br/></p>\n<p>trans is the index of the transparent color, bground color, for use in \nthe appropriate modes.</p>\n<p>color is the index of the drawing color, foreground color, for use in \nthe appropriate modes. \n<br/>\n<br/></p>\n<p>This is not overly optimised but should be reasonably fast.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 899,
   "name": "lua.wetgenes.grd.paint",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:palette(x,w)\ng:palette(x,w,&quot;&quot;)\ng:palette(x,w,tab)\ng:palette(x,w,str)\ng:palette(x,w,grd)\n</code></pre>\n<p>These are the same as g:pixels() but refer to the palette information \nwhich is stored as a 1 pixel high 256 pixel wide rgba image. The use of \n&quot;&quot; to read a string of bytes and passing in either a table of numerical \nvalues or string of bytes to write into the palette is the same system \nas used with pixels.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 694,
   "name": "lua.wetgenes.grd.palette",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:pixels(x,y,w,h)\ng:pixels(x,y,z,w,h,d)\n</code></pre>\n<p>Read the area of pixels as a table of numerical values, the amount of \nnumbers you get per pixel <em>depends</em> on the format of the grd.</p>\n<pre><code>g:pixels(x,y,w,h,&quot;&quot;)\ng:pixels(x,y,z,w,h,d,&quot;&quot;)\n</code></pre>\n<p>Read the area of pixels as a string of byte values, the amount of bytes \nyou get per pixel <em>depends</em> on the format of the grd. Note the passing \nin of an empty string to indicate that you with to receive a string.</p>\n<pre><code>g:pixels(x,y,w,h,tab)\ng:pixels(x,y,z,w,h,d,tab)\n</code></pre>\n<p>Write the area of pixels from a table of numerical values which is \nprovided in tab, the amount of numbers you need to provide per pixel \n<em>depends</em> on the format of the grd.</p>\n<pre><code>g:pixels(x,y,w,h,str)\ng:pixels(x,y,z,w,h,d,str)\n</code></pre>\n<p>Write the area of pixels from a string of bytes which is provided in \nstr, the amount of bytes you need to provide per pixel <em>depends</em> on the \nformat of the grd.</p>\n<pre><code>g:pixels(x,y,w,h,grd)\ng:pixels(x,y,z,w,h,d,grd)\n</code></pre>\n<p>Write the area of pixels from a grd which is provided in grd. use \nclip/layer functions to select a portion of a larger grd.</p>\n<p>As you can see depending on the arguments given this does one of two \nthings, read some pixels or write some pixels. The area that is to be \nused is provided first, as a 2d(x,y,w,h) or 3d(x,y,z,w,h,d) area. To \nread or write the entire 2d image or the first frame of an animation \nuse (0,0,g.width,g.height)</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns the requested data.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 640,
   "name": "lua.wetgenes.grd.pixels",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:quant(num)\n</code></pre>\n<p>Convert to an 8bit indexed image containing a palette of the requested size.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 593,
   "name": "lua.wetgenes.grd.quant",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga:remap(gb)\n</code></pre>\n<p>Fill gb with a remaped version of ga, each pixel is mapped to the closest palette entry.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1080,
   "name": "lua.wetgenes.grd.remap",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:reset()\n</code></pre>\n<p>Reset the grd which will now be a blank image of 0 dimensions.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert \notherwise returns g so that we can chain the result.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 370,
   "name": "lua.wetgenes.grd.reset",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:resize(w,h,d)\n</code></pre>\n<p>Resize the image to the given dimensions, this does not scale the image \ndata so instead each pixel will be in the same place after the resize. \nThis gives a crop effect when shrinking and extra blank area at the \nbottom right when growing. Useful if for instance you want to upload a \ntexture to OpenGL and need to change the size to be a power of two in \nwidth and height so you can mipmap it.\n    </p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 719,
   "name": "lua.wetgenes.grd.resize",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:save(opts)\n</code></pre>\n<p>Save an image to memory or filesytem depending on settings in opts.</p>\n<pre><code>opts.fmt\n</code></pre>\n<p>Lets you choose an image format, the strings &quot;jpg&quot;,&quot;png&quot; or &quot;gif&quot; will \nbe converted to the appropriate wgrd.FMT_HINT_* value.</p>\n<p>We will guess opts.fmt from the file name extension if it is not \nprovided and a file name is.</p>\n<pre><code>opts.filename\n</code></pre>\n<p>Flags this as a load the file system and provides the file name to \nwrite to. If no filename is given then we will be saving into memory \nand be returning that data string as the first return value.</p>\n<p>Returns nil,error if something goes wrong so can be used with assert.</p>\n<p>If no file name is given then we <em>return</em> the data string that we saved.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 461,
   "name": "lua.wetgenes.grd.save",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:scale(w,h,d)\n</code></pre>\n<p>Scale the image to the given dimensions, this is currently using a \nterrible scale filter that is only any good at halving or doubling the \nsize.</p>\n<p>This should only be used to create mipmaps until it is replaced with a \nbetter scale filter.\n    </p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 737,
   "name": "lua.wetgenes.grd.scale",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:shrink(area)\n</code></pre>\n<p>area is an {x=0,y=0,z=0,w=100,h=100,d=100} style table specifying a 3D\narea, set {z=0,d=1} for a 2D area.</p>\n<p>You should set this to the full size of the image.</p>\n<p>This function looks at the pixels in that area and shrinks each edge \ninwards if it is fully transparent then return this new area in the \nsame table that was passed in.</p>\n<p>You can then use this information to crop this image resulting in a \nsmaller sized grd containing all the solid pixels.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 816,
   "name": "lua.wetgenes.grd.shrink",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:slide(dx,dy,dz)\n</code></pre>\n<p>Slide the image along the x,y,z axis by the given amounts. The image wraps around the edges \nso no pixels are lost just moved around.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 755,
   "name": "lua.wetgenes.grd.slide",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>ga:sort_cmap()\n</code></pre>\n<p>Sort cmap into a &quot;good&quot; order and remap the image.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1136,
   "name": "lua.wetgenes.grd.sort_cmap",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>stream=g:stream(filename)\nstream=g:stream({filename=filename,...})\n</code></pre>\n<p>Open a GIF stream, returns a table with the following functions,</p>\n<pre><code>stream:write(ga)\n</code></pre>\n<p>Add a frame to the gif, each frame should be the same size and color map.</p>\n<pre><code>stream:close()\n</code></pre>\n<p>Close the stream and finalise the GIF.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 1041,
   "name": "lua.wetgenes.grd.stream",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  },
  {
   "body": "<pre><code>g:xor(ga)\n</code></pre>\n<p>Set our image data to the XOR of the image/palette data from ga and g.</p>\n<p>This is intended to be combined with g:shrink to work out the area of \nchange between the two images.</p>\n<p>Both grds must be the same size and format.</p>\n",
   "count": 1,
   "file": "../lua_grd/code/grd.lua",
   "line": 798,
   "name": "lua.wetgenes.grd.xor",
   "url": "https://github.com/xriss/gamecake/blob/master/lua_grd/code/grd.lua"
  }
 ],
 "_output_chunkname": "html",
 "_output_filename": "docs/lua.wetgenes.grd/index.html",
 "_root": "../../",
 "_site": "{_root}",
 "_sourcename": "docs/lua.wetgenes.grd/index.html",
 "body": "<div class=\"default\">\n\t<div class=\"contents\">\n\t\t<div class=\"topics\">\n\t\t\t<a class=\"par\" href=\"{_docs_json.dirname}\"><span>/</span></a>\n\t\t\t{_docs:menuwrap}\n\t\t</div>\n\t</div>\n\t<div class=\"main\">\n\t\t{_list:wrap}\n\t</div>\n</div>\n",
 "content": "<div class=\"content\">{nav}{body}</div>\n",
 "css": "\n/*\n\n\tVariables:\n\t\n\t------------------------------------------------------------------\n\tThe bright highlight used for the logo and links on hover\n\t------------------------------------------------------------------\n\t\n\tbase \t\t\t- Blue\t\t\t\t|\tLogo\n\tbase_alt \t\t- Light blue\t\t|\tLink hover\n\t\n\t------------------------------------------------------------------\n\tBasic colours for background and fonts\n\t------------------------------------------------------------------\n\t\n\tbase_back\t\t- Off white\t\t\t|\tMain body background\n\tbase_back_alt \t- Dark white\t\t|\tDocs column background\n\tbase_back_code\t- Dark blue grey\t|\tCode background\n\tbase_link\t\t- Medium grey\t\t|\tLink\n\tbase_font\t\t- Dark grey\t\t\t|\tBody font\n\tbase_code\t\t- White\t\t\t\t|\tCode font\n\tbase_src\t\t- Light grey\t\t|\tSource link background\n\t\n\t------------------------------------------------------------------\n\tExtra bits\n\t------------------------------------------------------------------\n\t\n\twhite \t\t\t- White\t\t\t\t|\tNavigation bar\n\thr\t\t \t\t- Blue\t\t\t\t|\tHorizontal line\n\n*/\n\n:root {\n  --base:#1400ff;\n  --base_alt:#3F2FFF;\n  --base_back:#f7f4fd;\n  --base_back_alt:#efefef;\n  --base_back_code:#282a36;\n  --base_link:#666;\n  --base_font:#484848;\n  --base_code:#fff;\n  --base_src:#d8d8d8;\n  --white:#fff;\n  --hr:#1400ff;\n}\n\n\n/*\n\n\tReset & base css\n\t\n\tbody\t|\t100vh - Avoid the IE 10-11 `min-height` bug.\n\n*/\n\n*{box-sizing:border-box; -webkit-box-sizing:border-box; -moz-box-sizing:border-box; -o-box-sizing:border-box; -ms-box-sizing:border-box;}\n\nhtml,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:top;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}\n\na,img\t\t{border:0; outline:none;}textarea:focus,input:focus{outline:0;}*:focus{outline:0;}\nbody, html\t{-webkit-font-smoothing:antialiased; -moz-osx-font-smoothing:grayscale; min-width:100%; min-height:100%; width:100%; height:100%; height:100vh; margin:0 auto;}\n\n\n/*\n\n\tMain styles for the entire site\n\t\n\ta\t\t|\tTransition css animations\n\n*/\n\nbody \t{background-color:var(--base_back); color:var(--base_font); display:flex; flex-direction:column; font-family:Arial, sans-serif; font-size:13px; line-height:18px; position:relative; padding-top:4em;}\n\na\t\t{-webkit-transition:all .2s ease-in-out; -moz-transition:all .2s ease-in-out; -o-transition:all .2s ease-in-out; -ms-transition:all .2s ease-in-out; transition:all .2s ease-in-out;}\n\na \t\t{color:var(--base_font); text-decoration:none;}\na:hover {color:var(--base); cursor:pointer;}\na img \t{border:none;}\n\nh1 \t\t{font-size:30px; margin-bottom:26px;}\nh1 a\t{font-weight:bold;}\nh2 \t\t{font-size:24px;}\nh3 \t\t{font-size:18px;}\nh4 \t\t{font-size:16px;}\nh5 \t\t{font-size:14px;}\nh6 \t\t{font-size:13px;}\n\nb\t\t{font-weight:bold;}\np \t\t{font-size:19px; line-height:31px; margin-bottom:16px;}\nstrong\t{font-weight:bold;}\n\n.line, hr\t\t\t{border-top:1px dashed var(--hr); margin-top:40px; margin-bottom:20px; position:relative;}\n\nblockquote \t\t\t{font-family:georgia,serif; font-style:italic; padding:13px 13px 21px 15px; margin-bottom:18px;}\nblockquote:before\t{color:#eee; content:\"\\201C\"; font-family:georgia,serif; font-size:40px; margin-left:-10px;}\nblockquote p \t\t{font-size:14px; font-style:italic; font-weight:300; line-height:18px; margin-bottom:0;}\n\ncode, pre \t\t\t{color:var(--base_code); font-family:monospace;}\ncode\t\t\t\t{background:var(--base_back_code);  border-radius:3px; -webkit-border-radius:3px; -moz-border-radius:3px; font-size:12px; padding:1px 3px;}\npre\t\t\t\t\t{background-color:var(--base_back_code); border-radius:6px; font-size:11px; line-height:16px; margin:32px 0 18px 0; padding:14px; white-space:pre-wrap; word-wrap:break-word; }\npre:first-of-type\t{margin-top:0;}\npre code \t\t\t{background:transparent; font-size:14px; line-height:26px; padding:0;}\nsup \t\t\t\t{font-size:0.83em; line-height:0; vertical-align:super;}\n\n\n/*\n\n\tWrappers:\n\t\n\t* Prevent Chrome, Opera, and Safari from letting these items shrink \n\tto smaller than their content's default minimum size.\n\t\n\tcontent\t\t\t|\tFlex = *\n\tdefault \t\t|\tClean default div, used only in Docs body\n\tnav_wrap \t\t|\tNavigation bar for entire site\n\tright \t\t\t|\tClass for text-align right\n\n*/\n\n.content\t{flex:1 0 auto;}\n.default\t{margin:0 auto;}\n.nav_wrap\t{background-color:var(--white); left:0; padding:1.5em 3em; position:fixed; top:0; width:100%; z-index:100;}\n.right\t\t{text-align:right;}\n\n\n/*\n\n\tNavigation bar:\n\t\n\tThe main navigation bar is made up of a wrapper div that holds the\n\tmain logo link and an unordered list of all the other pages.\n\t\n\tnav\t\t \t\t|\tMain div for logo and links\n\tnav ul\t \t\t|\tListing of links\n\tnav a \t\t\t|\tLinks with padding\n\n*/\n\n.nav\t\t{align-items:center; display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; -moz-box-align:center; -ms-box-align:center; -webkit-box-align:center;}\n.nav ul\t\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:flex-end; width:100%;}\n.nav a\t\t{color:var(--base_link); font-size:1.5em; margin:0 1rem;}\n.nav a:hover{color:var(--base);}\n\n\n/*\t\n\n\tLogo:\n\t\n\t'Patua One' is only used here - @import found in ^.html\n\t\n\tlogo\t \t\t|\tSplash page logo\n\tlogo p\t \t\t|\tSplash page about div\n\tnav a.logo \t\t|\tLogo in navigation bar\n\t\n*/\n\n.logo\t\t{color:var(--base); font-family:'Patua One',georgia,serif;}\n.logo p\t\t{color:var(--base_font); font-size:5em; line-height:0.8em;}\n.nav a.logo {color:var(--base); display:block; font-size:1.8em;}\n\n\n/*\n\n\tInstall:\n\t\n\tInstallation instructions on the splash page\n\t\n\tinstall \t\t|\tMain wrapper\n\tinstall div\t\t|\tWrapper for installation divs\n\tinstall code\t|\tBigger fonts for code div\n\t\n*/\n\n.install \t\t\t\t\t{display:flex; justify-content:space-evenly; margin-top:2em; width:100%;}\n.install div\t\t\t\t{padding-left:5%; width:60%;}\n.install div:nth-of-type(1) {padding:0; width:40%;}\n.install.full div\t\t\t{width:100%;}\n.install code \t\t\t\t{font-size:1.6em;}\n\n\n/*\n\n\tBlog:\n\t\n\tblog_info \t\t|\tBlog author & date info\n\tblog_wrap \t\t|\tWrapper for a blog post\n\tblog_wrap a\t\t|\tFix long urls with these rules\n\tpaging_wrap\t\t|\tWrapper for paging links\n\t\n*/\n\n\n.blog_info\t\t{font-size:70%; position:absolute; right:10px; top:2.5em; background-color:#e7e1f5; padding:0 20px;}\n\n.blog_wrap\t\t{color:var(--base_font); font-family:sans-serif; font-size:20px; line-height:33px; margin:auto; padding:4em 0; position:relative; width:740px;}\n.blog_wrap h2\t{font-family:'Patua One',georgia,serif; font-size:2.5em; line-height:1em; padding-bottom:1em;}\n.blog_wrap a\t{overflow-wrap:break-word; word-wrap:break-word; word-break:break-word; -ms-hyphens:auto; -moz-hyphens:auto; -webkit-hyphens:auto; hyphens:auto;}\n.blog_wrap a \t{color:var(--base); text-decoration:none;}\n.blog_wrap a:hover {color:var(--base_alt); cursor:pointer;}\n\n.paging_wrap\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:space-between; margin-top:5em;}\n.paging_wrap a\t{font-size:80%; display:block;}\n\n\n/*\n\n\tFooter:\n\t\n\tSticky footer with flexbox\n\t\n\thttps://css-tricks.com/couple-takes-sticky-footer/\n\t\n\t* Prevent Chrome, Opera, and Safari from letting these items shrink \n\tto smaller than their content's default minimum size.\n\t\n\tfooter\t \t\t|\tFlex = *\n\tfooter ul \t\t|\tFooter links\n\t\n*/\n\n.footer\t\t\t{flex-shrink:0; padding:2em 4em;}\n.footer ul\t\t{display:flex; display:-webkit-box; display:-moz-box; display:-ms-flexbox; display:-webkit-flex; justify-content:space-between; width:100%;}\n\n\n/*\n\n\tMedia queries\n\t\n\tmain\t\t\t|\tWrapper for documentation page\n\tcontents\t\t|\tWrapper for documentation table of contents\n\t\n*/\n\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\nonly screen and (-o-min-device-pixel-ratio: 3/2),\nonly screen and (min--moz-device-pixel-ratio: 1.5),\nonly screen and (min-device-pixel-ratio: 1.5) {\n\n\tbody\t\t\t{padding-top:7em;}\n\t.nav_wrap\t\t{padding:3em;}\n\t.nav\t\t\t{font-size:1.5em;}\n\t.blog_info\t\t{font-size:1em;}\n\t.blog_wrap h2\t{font-size:3em;}\n\tp \t\t\t\t{font-size:1.5em; line-height:1.5em; margin-bottom:1.5em;}\n\t.footer\t\t\t{font-size:1.5em;}\n\t.paging_wrap\t{font-size:1.5em;}\n\t\n\t.main\t\t\t{max-width:initial;}\n\t.contents\t\t{top:5.5em;}\n\n}\n",
 "foot": "<div class=\"footer\">\n\t<ul>\n\t\t<li>Created with <a href=\"https://xriss.github.io/plated/\" class=\"logo\">plated^</a></li>\n\t\t<li><a href=\"#\">^.^</a></li>\n\t\t<li><a href=\"https://github.com/xriss/gamecake/blob/master/LICENSE\">2018 MIT License</a></li>\n\t</ul>\n</div>\n",
 "head": "<title>{title}</title>\n<meta name=\"theme-color\" content=\"#2a3133\">\n<link href=\"https://fonts.googleapis.com/css?family=Patua+One\" rel=\"stylesheet\">\n<style>\n{css}\n</style>",
 "html": "<html>\n\t<head>\n\t\t<title>{title}</title>\n\t\t<link href=\"https://fonts.googleapis.com/css?family=Patua+One\" rel=\"stylesheet\">\n\t\t<link rel='stylesheet' href='{_docs_json.dirname}/docs.css' />\n\t</head>\n\t<body>{nav}{body}</body>\n</html>\n",
 "menuwrap": "{_it:menuwrap_link}",
 "menuwrap_link": "{_it.count>1&&_it:menuwrap_link2||}\n{_it.count==1&&_it:menuwrap_link1||}",
 "menuwrap_link1": "<a class=\"sub\" href=\"{_docs_json.dirname}/{_it.name}\"><span>/{_it.name}</span></a>",
 "menuwrap_link2": "<a class=\"par\" href=\"{_docs_json.dirname}/{_it.name}\"><span>/{_it.name}</span></a>",
 "nav": "<div class=\"nav_wrap\">\n\t<div class=\"nav\">\n\t\t<a href=\"{_root}\" class=\"logo\">Gamecake</a>\n\t\t<ul>\n\t\t\t<li><a href=\"https://github.com/xriss/gamecake\">Github</a></li>\n\t\t\t<li><a href=\"{_root}blog\">Blog</a></li>\n\t\t\t<li><a href=\"{_root}docs\">Documentation</a></li>\n\t\t</ul>\n\t</div>\n</div>\n",
 "title": "Gamecake docs!",
 "wrap": "\n<div class=\"wrap\">\n<h1><a href=\"{_docs_json.dirname}/{_it.name}\">{_it.name}</a></h1>\n<div class=\"source\"><a href=\"{_it.url}#L{_it.line}\">{_it.url}</a></div>\n<div>{[[}{_it.body}{]]}</div>\n</div>\n"
}