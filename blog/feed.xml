<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Title</title>
  <id>/blog/feed.xml</id>
  <updated>2018-04-24T00:00:00.000Z</updated>
  <link rel="self" type="application/atom+xml" href="/blog/feed.xml"/>
  <link rel="alternate" type="application/json" href="/blog/feed.json"/>
  <link rel="alternate" type="text/html" href="/"/>
  <generator uri="https://github.com/bcomnes/jsonfeed-to-atom#readme" version="1.2.5">jsonfeed-to-atom</generator>
  <entry>
    <id>/blog/2018-04-24-building-in-boxes/</id>
    <title>Building in boxes.</title>
    <updated>2018-04-24T00:00:00.000Z</updated>
    <published>2018-04-24T00:00:00.000Z</published>
    <author>
      <name>xix</name>
    </author>
    <content type="html"><![CDATA[<div class="blog_wrap">
	<div class="blog_info"><a href="/blog/2018-04-24-building-in-boxes">Building in boxes.</a> by xix on 2018-04-24</div>
	<h2 id="_blog_post_jsontitle">Building in boxes.</h2>
<p>I have just spent a week cleaning up the gamecake build process 
which has been suffering from bitrot.</p>
<p>Originally, many years ago, I was trying to use cross builds where 
possible and chroots where that wasn&#39;t. This ended up being 
problematic. It is much easier to set everything up inside virtual 
machines even if this is slower and more of a resource hog, especially 
if using QEMU for the ARM builds.</p>
<p>So this has been a cleanup that, hopefully, simplifies the builds, 
removes some complexity left over from old cross compiling attempts and 
make using CircleCI for automatically build and testing a little bit 
faster.</p>
<p>Take a look in each vbox_* directory for how this is all working; some 
of which are still experimental, eg. getting windows working well under 
Linux so I can try and step out of win32. Apart from these boxes which 
are used for building releases, there has been some major cleanup in the 
following public builds.</p>
<p>** We have a docker <em>build</em> box. **</p>
<p>This is ubuntu 16.04 with premake4, SDL2 and LuaJIT built from source; 
we need to build them from source as the version you will find in apt 
is often out of date especially when using an older version of Ubuntu.</p>
<p>We really do want the older version of Ubuntu as we want to work on 
older machines with older libraries available and we really do need the 
newer versions of SDL2 and LuaJIT for added features and bug fixes.</p>
<p>16.04 is a compromise here as 12.04 and 14.04 caused too many build 
problems and it was easier to bump to 16.04 which is only a couple of 
years difference in terms of code base and stability.</p>
<p><a href="https://hub.docker.com/r/xriss/gamecake/">https://hub.docker.com/r/xriss/gamecake/</a> is now used as the base box 
for <a href="https://circleci.com/gh/xriss/gamecake">https://circleci.com/gh/xriss/gamecake</a> builds.</p>
<p>** Due to significantly improved build time by not including SDL2 and 
LuaJIT from source, we now also build for Windows and Emscripten with 
every push. **</p>
<p>CircleCI has switched to a new configuration system which meant we 
needed to update our config files before they stop working later this 
year. It seems the build artifacts are no longer available to the 
public. We do, however, save the actual build outputs with every build.</p>
<p>** We have decided to dump the pagecake build. **</p>
<p>This was an OpenResty nginx with extra libs but I did not keep nginx 
very well up-to-date. So instead we now just use a standard OpenResty. 
Extra libraries are made available to the nginx lua host as rocks so 
this keeps us nicely up-to-date and gives us a reason to start 
publishing rocks.</p>
<p>** I&#39;ve decided to keep all of the libraries together in one rock.**<br>See <a href="https://luarocks.org/modules/xriss/gamecake">https://luarocks.org/modules/xriss/gamecake</a> for the rocks.</p>
<p>For now, these are just the most essential ones to keep all our websites 
running but eventually a luarocks install of gamecake will be the same 
as downloading one of our prebuilt executables.</p>
<p>** We have snap builds.**</p>
<p>These can be found at <a href="https://dashboard.snapcraft.io/snaps/gamecake/">https://dashboard.snapcraft.io/snaps/gamecake/</a> 
and is probably one of the easiest ways of getting a Linux version 
which also supports ARM machines.</p>
<p>Keeping all of this running is an awful amount of annoying work as no 
matter what I do, sooner or later one of the platforms will break 
something we rely on. Hopefully this update will give us another few 
years before it all begins to rot again.</p>

</div>
]]></content>
    <link rel="alternate" href="/blog/2018-04-24-building-in-boxes/"/>
  </entry>
  <entry>
    <id>/blog/2017-12-30-beware-of-the-node/</id>
    <title>Beware of the node.</title>
    <updated>2017-12-30T00:00:00.000Z</updated>
    <published>2017-12-30T00:00:00.000Z</published>
    <author>
      <name>xix</name>
    </author>
    <content type="html"><![CDATA[<div class="blog_wrap">
	<div class="blog_info"><a href="/blog/2017-12-30-beware-of-the-node">Beware of the node.</a> by xix on 2017-12-30</div>
	<h2 id="_blog_post_jsontitle">Beware of the node.</h2>
<p>This is a test post to go along with the adding of plated, our 
recursive static site builder written in node to the gamecake 
repository.</p>
<p>This is a node app, so be sure to npm install in the plated directory 
if you expect any of the scripts to work.</p>

</div>
]]></content>
    <link rel="alternate" href="/blog/2017-12-30-beware-of-the-node/"/>
  </entry>
</feed>