/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// (C) Kriss@XIXs.com 2013
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
#include "all.h"



static unsigned char const font_bits[16*48]={

0x00,0x18,0x66,0x6c,0x18,0x00,0x70,0x18,0x0c,0x30,0x00,0x00,0x00,0x00,0x00,0x06,
0x00,0x18,0x66,0x6c,0x3e,0x66,0xd8,0x18,0x18,0x18,0xcc,0x30,0x00,0x00,0x00,0x0c,
0x00,0x18,0x00,0xfe,0x60,0xac,0xd0,0x00,0x30,0x0c,0x78,0x30,0x00,0x00,0x00,0x18,
0x00,0x18,0x00,0x6c,0x3c,0xd8,0x76,0x00,0x30,0x0c,0xfc,0xfc,0x00,0x7e,0x00,0x30,
0x00,0x18,0x00,0xfe,0x06,0x36,0xdc,0x00,0x30,0x0c,0x78,0x30,0x00,0x00,0x00,0x60,
0x00,0x00,0x00,0x6c,0x7c,0x6a,0xdc,0x00,0x18,0x18,0xcc,0x30,0x18,0x00,0x18,0xc0,
0x00,0x18,0x00,0x6c,0x18,0xcc,0x76,0x00,0x0c,0x30,0x00,0x00,0x18,0x00,0x18,0x80,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,

0x78,0x18,0x3c,0x3c,0x1c,0x7e,0x1c,0x7e,0x3c,0x3c,0x00,0x00,0x00,0x00,0x00,0x3c,
0xcc,0x38,0x66,0x66,0x3c,0x60,0x30,0x06,0x66,0x66,0x18,0x18,0x06,0x00,0x60,0x66,
0xdc,0x78,0x06,0x06,0x6c,0x7c,0x60,0x06,0x66,0x66,0x18,0x18,0x18,0x7e,0x18,0x06,
0xfc,0x18,0x0c,0x1c,0xcc,0x06,0x7c,0x0c,0x3c,0x3e,0x00,0x00,0x60,0x00,0x06,0x0c,
0xec,0x18,0x18,0x06,0xfe,0x06,0x66,0x18,0x66,0x06,0x00,0x00,0x18,0x7e,0x18,0x18,
0xcc,0x18,0x30,0x66,0x0c,0x66,0x66,0x18,0x66,0x0c,0x18,0x18,0x06,0x00,0x60,0x00,
0x78,0x18,0x7e,0x3c,0x0c,0x3c,0x3c,0x18,0x3c,0x38,0x18,0x18,0x00,0x00,0x00,0x18,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,

0x7c,0x3c,0x7c,0x1e,0x78,0x7e,0x7e,0x3c,0x66,0x3c,0x06,0xc6,0x60,0xc6,0xc6,0x3c,
0xc6,0x66,0x66,0x30,0x6c,0x60,0x60,0x66,0x66,0x18,0x06,0xcc,0x60,0xee,0xe6,0x66,
0xde,0x66,0x66,0x60,0x66,0x60,0x60,0x60,0x66,0x18,0x06,0xd8,0x60,0xfe,0xf6,0x66,
0xd6,0x7e,0x7c,0x60,0x66,0x78,0x78,0x6e,0x7e,0x18,0x06,0xf0,0x60,0xd6,0xde,0x66,
0xde,0x66,0x66,0x60,0x66,0x60,0x60,0x66,0x66,0x18,0x06,0xd8,0x60,0xc6,0xce,0x66,
0xc0,0x66,0x66,0x30,0x6c,0x60,0x60,0x66,0x66,0x18,0x66,0xcc,0x60,0xc6,0xc6,0x66,
0x78,0x66,0x7c,0x1e,0x78,0x7e,0x60,0x3e,0x66,0x3c,0x3c,0xc6,0x7e,0xc6,0xc6,0x3c,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

0x7c,0x3c,0x7c,0x3c,0x7e,0x66,0x66,0xc6,0xc6,0xc6,0x7e,0x3c,0x80,0x3c,0x00,0x00,
0x66,0x66,0x66,0x66,0x18,0x66,0x66,0xc6,0x6c,0x6c,0x0c,0x30,0xc0,0x0c,0x18,0x00,
0x66,0x66,0x66,0x70,0x18,0x66,0x66,0xc6,0x38,0x38,0x18,0x30,0x60,0x0c,0x66,0x00,
0x7c,0x66,0x7c,0x3c,0x18,0x66,0x66,0xd6,0x38,0x18,0x30,0x30,0x30,0x0c,0x00,0x00,
0x60,0x66,0x6c,0x0e,0x18,0x66,0x3c,0xfe,0x38,0x18,0x60,0x30,0x18,0x0c,0x00,0x00,
0x60,0x6e,0x66,0x66,0x18,0x66,0x3c,0xee,0x6c,0x18,0xc0,0x30,0x0c,0x0c,0x00,0x00,
0x60,0x3f,0x66,0x3c,0x18,0x3c,0x18,0xc6,0xc6,0x18,0xfe,0x3c,0x06,0x3c,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,

0x18,0x00,0x60,0x00,0x06,0x00,0x1c,0x00,0x60,0x18,0x0c,0x60,0x18,0x00,0x00,0x00,
0x18,0x00,0x60,0x00,0x06,0x00,0x30,0x00,0x60,0x00,0x00,0x60,0x18,0x00,0x00,0x00,
0x0c,0x3c,0x7c,0x3c,0x3e,0x3c,0x7c,0x3e,0x7c,0x18,0x0c,0x66,0x18,0xec,0x7c,0x3c,
0x00,0x06,0x66,0x60,0x66,0x66,0x30,0x66,0x66,0x18,0x0c,0x6c,0x18,0xfe,0x66,0x66,
0x00,0x3e,0x66,0x60,0x66,0x7e,0x30,0x66,0x66,0x18,0x0c,0x78,0x18,0xd6,0x66,0x66,
0x00,0x66,0x66,0x60,0x66,0x60,0x30,0x3e,0x66,0x18,0x0c,0x6c,0x18,0xc6,0x66,0x66,
0x00,0x3e,0x7c,0x3c,0x3e,0x3c,0x30,0x06,0x66,0x18,0x0c,0x66,0x0c,0xc6,0x66,0x3c,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x18,0x30,0xfe,0xff,
0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x18,0x38,0x00,0xff,
0x7c,0x3e,0x7c,0x3c,0x7c,0x66,0x66,0xc6,0xc6,0x66,0x7e,0x18,0x18,0x18,0x00,0xff,
0x66,0x66,0x66,0x60,0x30,0x66,0x66,0xc6,0x6c,0x66,0x0c,0x38,0x18,0x1c,0x00,0xff,
0x66,0x66,0x60,0x3c,0x30,0x66,0x66,0xd6,0x38,0x66,0x18,0x38,0x18,0x1c,0x00,0xff,
0x7c,0x3e,0x60,0x06,0x30,0x66,0x3c,0xfe,0x6c,0x3c,0x30,0x18,0x18,0x18,0x00,0xff,
0x60,0x06,0x60,0x7c,0x1c,0x3e,0x18,0x6c,0xc6,0x18,0x7e,0x1c,0x18,0x38,0x00,0xff,
0x60,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x0c,0x18,0x30,0x00,0xff

};



/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
bool fenestra_ogl::debug_setup()
{
int xi,yi;
int x,y,xx,yy;
u8 b;
u8 m;
cu8 *f=font_bits;
u32 *t;
u32 c;
bool last;
u32 bmap[8*8];
int i=0;

    // allocate texture names
    glGenTextures( 96, debug_font_chars );

	for(yy=0;yy<48;yy+=8) // bitmap data is 6 chars high
	{
		last=false;
		for(xx=0;xx<128;xx+=8) // bitmap data is 16 chars wide
		{
			
// build a single char			
			for(y=0;y<8;y++)
			{
				f=font_bits+((yy)*16)+(xx/8);
				for(x=0;x<8;x++)
				{
					b=*(f+(y*16));
					m=0x80>>x;
					if(b&m)
					{
						c=0xffffffff; // solid
					}
					else
					{
							c=0x44000000; // transparent
/*
						for(yi=-1;yi<=1;yi++)
						{
							for(xi=-1;xi<=1;xi++)
							{
								if(	((x+xi)>=0) &&
									((x+xi)<=7) &&
									((y+yi)>=0) &&
									((y+yi)<=7) )
								{
									b=*(f+(y+yi)*16);
									m=0x80>>(x+xi);
									if(b&m)
									{
										c=0xff000000; // shadow
									}
								}
							}
						}
*/
					}
					bmap[x+(y*8)]=c;
				}
			}
			
			// select our current texture
			glBindTexture( GL_TEXTURE_2D, debug_font_chars[i] );

			// select modulate to mix texture with color for shading
			glTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE );

			// when texture area is small, bilinear filter the closest mipmap
			glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );

			// when texture area is large, bilinear filter the first mipmap
			glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

			glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP );
			glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP );

			// build our texture mipmaps
		    gluBuild2DMipmaps( GL_TEXTURE_2D, GL_RGBA , 8, 8, GL_RGBA, GL_UNSIGNED_BYTE, bmap );
//			glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA,8,8,0,GL_RGBA, GL_UNSIGNED_BYTE,bmap);
			
			i++;
		}
	}

	return true;
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_font_start()
{
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity ();
	glOrtho(0,width, height,0, -1.0,1.0);

	glEnable( GL_TEXTURE_2D );
//	glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glEnable(GL_BLEND);

//    glBindTexture( GL_TEXTURE_2D, debug_font );

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	
	glDisable(GL_LIGHTING);
	glDisable(GL_DEPTH_TEST);
	
	glEnable( GL_TEXTURE_2D );
	
	glDisable( GL_CULL_FACE );
	
}


/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_font_position(f32 x, f32 y, f32 size, u32 color)
{
	debug_font_x=x;
	debug_font_y=y;
	debug_font_size=size;
	debug_font_color=color;
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_font_draw(char c)
{
	GLfloat x,y,s;
	GLfloat cx,cy;

	x=(GLfloat)debug_font_x;
	y=(GLfloat)debug_font_y;
	s=(GLfloat)debug_font_size;

	c=c-32;
	if(c<0)   { c=95; } 
	if(c>95)  { c=95; } 
    glBindTexture( GL_TEXTURE_2D, debug_font_chars[c] );
//	glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
    
	glColor4ub( (debug_font_color>>16)&0xff , (debug_font_color>>8)&0xff , (debug_font_color)&0xff , (debug_font_color>>24)&0xff );
	
	glBegin(GL_QUADS);
	 	glTexCoord2d(0,1); glVertex2f(x,   y+s);
	 	glTexCoord2d(0,0); glVertex2f(x,   y  );
	 	glTexCoord2d(1,0); glVertex2f(x+s, y  );
	 	glTexCoord2d(1,1); glVertex2f(x+s, y+s);
	glEnd();

//	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	debug_font_x+=debug_font_size;
}

void fenestra_ogl::debug_font_draw_string(const char *string)
{
const char *s;

	for(s=string;*s;s++)
	{
		debug_font_draw(*s);
		
		if(debug_font_x>width) break;
	}
}


/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// alternative drawstring for "normal" use
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_font_draw_string_alt(const char *string)
{
const char *s;

glDisable(GL_LIGHTING);
glEnable( GL_TEXTURE_2D );
	
glColor4ub( (debug_font_color>>16)&0xff , (debug_font_color>>8)&0xff , (debug_font_color)&0xff , (debug_font_color>>24)&0xff );
		
//	glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
	for(s=string;*s;s++)
	{
		char c=*s;
		
		GLfloat x,y,siz;

		x=(GLfloat)debug_font_x;
		y=(GLfloat)debug_font_y;
		siz=(GLfloat)debug_font_size;
		
		c=c-32;
		if(c<0)   { c=95; } 
		if(c>95)  { c=95; } 
		glBindTexture( GL_TEXTURE_2D, debug_font_chars[c] );
		
		glBegin(GL_QUADS);
			glTexCoord2d(0,1); glVertex2f(x,     y-siz);
			glTexCoord2d(0,0); glVertex2f(x,     y    );
			glTexCoord2d(1,0); glVertex2f(x+siz, y    );
			glTexCoord2d(1,1); glVertex2f(x+siz, y-siz);
		glEnd();

		debug_font_x+=debug_font_size;
		
		if(debug_font_x>width) break;
	}
//	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	
glDisable( GL_TEXTURE_2D );
glEnable(GL_LIGHTING);

}


/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_rect(f32 x1, f32 y1, f32 x2, f32 y2, u32 argb)
{
	glDisable( GL_TEXTURE_2D );
	
	glColor4ub( (argb>>16)&0xff , (argb>>8)&0xff , (argb)&0xff , (argb>>24)&0xff );

	glBegin(GL_QUADS);
	 	glVertex2f((GLfloat)x1, (GLfloat)y2 );
	 	glVertex2f((GLfloat)x1, (GLfloat)y1 );
	 	glVertex2f((GLfloat)x2, (GLfloat)y1 );
	 	glVertex2f((GLfloat)x2, (GLfloat)y2 );
	glEnd();

	glEnable( GL_TEXTURE_2D );
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_polygon_begin()
{
	glDisable( GL_TEXTURE_2D );
	glBegin(GL_POLYGON);
}
void fenestra_ogl::debug_polygon_vertex(f32 x,f32 y,u32 argb)
{
	glColor4ub( (argb>>16)&0xff , (argb>>8)&0xff , (argb)&0xff , (argb>>24)&0xff );
 	glVertex2f((GLfloat)x, (GLfloat)y );
}
void fenestra_ogl::debug_polygon_end()
{
	glEnd();
	glEnable( GL_TEXTURE_2D );
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_font_end()
{
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// Setup junk
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void fenestra_ogl::debug_font_string(f32 x, f32 y, f32 size, u32 color, const char *string)
{
	debug_font_position(x, y, size, color);
	debug_font_start();
	debug_font_draw_string(string);
	debug_font_end();
}

