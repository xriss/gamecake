#!/usr/bin/make -f
# debian/rules file to build packages from wx CVS source
#
# Sculpted 13/2/2000 by Ron Lee <ron@debian.org> from new and
# variously stolen code :-)
# It makes copious use of the debhelper utilities written by
# Joey Hess and others.
#
# Significantly hacked up in July 2007 by Robin Dunn
#

#export DH_VERBOSE=1
export DH_OPTIONS

ifdef CONCURRENCY_LEVEL
  # A user who knows what they want, that's like gold...
  # respect their precious opinion of how much blue smoke to use.
  JOB_COUNT := $(CONCURRENCY_LEVEL)
else ifdef DISTCC_HOSTS
 # Otherwise, if they have a cluster, try to put it to good use.
  JOB_COUNT := $(shell set $${DISTCC_HOSTS} > /dev/null 2>&1 ; echo $$\#)
endif

ifdef JOB_COUNT
  FAST_MAKE  = $(MAKE) -j $(JOB_COUNT)
else
  FAST_MAKE = $(MAKE)
endif


# Find the python version(s) to build for
PYVERS := $(shell pyversions -vr || pyversions -vs)
ifeq ($(strip $(PYVERS)),)
    PYVERS := $(shell python -c 'import sys; print sys.version[:3]')
    NO_PYCENTRAL = 1
    PY_BUILD_DEPS = python$(PYVERS), python$(PYVERS)-dbg, python$(PYVERS)-dev
else
    DEB_PYTHON_SYSTEM=pycentral
    PY_BUILD_DEPS = python-all, python-all-dbg, python-all-dev, python-central
endif

# If another source package is to supply the common binary packages
# for a particular Debian release, then define this variable to indicate
# the $(release) that is expected to provide it.  Do not define it at
# all if this is to be the default (or only) wx source package for the
# target release.
#
#DEBIAN_WX_DEFAULT_VERSION = 2.8


# This will extract a flavour out of the name of the source directory
# and flavour the packages and binaries with it.  'Official' builds
# should use a source dir of the form wxwidgets$RELEASE-$VERSION.
# Flavoured builds may use wxwidgets$RELEASE-$FLAVOUR-$VERSION, where
# any descriptive alphanumeric name will do for FLAVOUR.  This will
# allow a custom build to be installed alongside the mainline ones
# without conflict.  You will also need to make a corresponding
# changelog entry for your flavour source package using:
# wxwidget$RELEASE-$FLAVOUR ($VERSION) to satify dpkg-source and
# to correctly set the release below.
DEBIAN_WXFLAVOUR := $(shell pwd | sed -e 's@.*/wxwidgets[0-9.]\+-\?\(.*\)-[0-9.]\+-\?.*@\1@')


wx_major_version_number := $(shell sed -n 's/^wx_major_version_number=//p' configure.in)
wx_minor_version_number := $(shell sed -n 's/^wx_minor_version_number=//p' configure.in)
wx_release_number       := $(shell sed -n 's/^wx_release_number=//p' configure.in)
wx_subrelease_number    := $(shell sed -n 's/^wx_subrelease_number=//p' configure.in)

##release   := $(shell dpkg-parsechangelog | sed -n 's/^Source: wxwidgets//p' | sed 's/-ansi//')
release  := $(wx_major_version_number).$(wx_minor_version_number)

# This is broken completely now by bakefiles changes.  Until we add
# some hocus pocus to the main tree, to export these values from it
# again, we approximate its behaviour (fairly precisely fwiw) to
# specify $soversion below.  Re-automate if incompatible changes
# result in it actually changing.
#soversion := $(shell grep '^WX_CURRENT=' configure.in | sed 's/WX_CURRENT=\([0-9]\+\).*/\1/')
soversion := 0
sorelease := $(release:%-$(DEBIAN_WXFLAVOUR)=%)-$(soversion)$(addprefix -,$(DEBIAN_WXFLAVOUR))

# In some places we use the full version number, including the micro version,
# for the development releases (which can be incompatible for the same major
# and minor version) but just the major.minor for the stable releases (which
# are supposed to be compatible), this variable contains the appropriate value
ifeq ($(shell echo `echo $(release) | sed 's/.\+\.\(.\+\)/\1/'`%2 | bc),1)
    # development release
    compatible_release := $(release).$(wx_release_number)
else
    compatible_release := $(release)
endif

# Base value for alternative priorities.
alt_prio  := $(subst .,,$(release))

cross_host  := i586-mingw32msvc
cross_build := $(shell ./config.guess)

config_cache       = ../config_deb.cache
config_cache_cross = ../config_deb_cross.cache


# build options
COMMON_CONFIGURE_OPTIONS = \
    --prefix=/usr \
    --cache-file=$(config_cache) \
    --with-flavour=$(DEBIAN_WXFLAVOUR) \
    --with-zlib=sys \
    --disable-reserved_virtual \

BASE_CONFIGURE_OPTIONS = $(COMMON_CONFIGURE_OPTIONS) \
    --disable-gui \

GTK_CONFIGURE_OPTIONS = $(COMMON_CONFIGURE_OPTIONS) \
    --with-gtk \
    --enable-mediactrl \
    --enable-sound \
    --with-sdl \
    --enable-display \
    --enable-geometry \
    --enable-graphics_ctx \
    --with-libjpeg=sys \
    --with-libpng=sys \
    --with-libtiff=sys \


pytoolkit := gtk2
PY_WX_CONFIG_OPTIONS = --version=$(release) --toolkit=$(pytoolkit) --static=no

WX_UNICODE := 1
WX_OPENGL := 1

ifeq ($(WX_UNICODE),1)
    COMMON_CONFIGURE_OPTIONS += --enable-unicode
    PY_WX_CONFIG_OPTIONS += --unicode
    PY_UNICODE = UNICODE=1
    wxpydir := wx-$(compatible_release)-$(pytoolkit)-unicode

    # for compatibility with the existing 2.6 packages, we don't use "u" in
    # the Unicode (default) package names
    unicode_suffix :=
else
    # but we do need to use something for non-Unicode packages to distinguish
    # them
    unicode_suffix := -ansi
    PY_UNICODE = UNICODE=0
    wxpydir   := wx-$(compatible_release)-$(pytoolkit)
endif

ifeq ($(WX_OPENGL),1)
    GTK_CONFIGURE_OPTIONS += --with-opengl
else
    GTK_CONFIGURE_OPTIONS += --without-opengl
endif

#---------------------------------------------------------------------------
# Packages to build

package_wxbase_lib      := libwxbase$(sorelease)$(unicode_suffix)
package_wxbase_dev      := libwxbase$(release)$(unicode_suffix)-dev
package_wxbase_dbg      := libwxbase$(release)$(unicode_suffix)-dbg

package_gtk_lib         := libwxgtk$(sorelease)$(unicode_suffix)
package_gtk_dev         := libwxgtk$(release)$(unicode_suffix)-dev
package_gtk_dbg         := libwxgtk$(release)$(unicode_suffix)-dbg

package_headers         := wx$(release)-headers
package_i18n            := wx$(release)-i18n
package_doc             := wx$(release)-doc
package_examples        := wx$(release)-examples
package_common           = wx-common

package_gtk_py_lib      := python-wxgtk$(release)$(unicode_suffix)
package_gtk_py_ver       = python-wxversion
package_gtk_py_tools     = python-wxtools
package_gtk_py_addons    = python-wxaddons
package_gtk_dbg_py      := python-wxgtk$(release)$(unicode_suffix)-dbg


# The packages listed here are common to all wx versions, and may be provided
# by another source package if more than one is in the release simultaneously.
common_packages	:= $(package_common) $(package_gtk_py_ver) $(package_gtk_py_tools) $(package_gtk_py_addons)


package_msw_dev         := libwxmsw$(release)$(unicode_suffix)-dev
package_msw_dbg         := libwxmsw$(release)$(unicode_suffix)-dbg
package_headers_msw     := wx$(release)-headers-msw

# The packages listed here will not be built by default.
extra_packages := $(package_msw_dev) $(package_msw_dbg) $(package_headers_msw)

ifdef DEBIAN_WX_DEFAULT_VERSION
  extra_packages += $(common_packages)
endif


#---------------------------------------------------------------------------
# Build directories

objdir_wxbase_shared       = objs_wxbase_sh
objdir_wxbase_debug        = objs_wxbase_d
objdir_gtk_shared          = objs_gtk_sh
objdir_gtk_debug           = objs_gtk_d
objdir_gtk_install         = objs_gtk_install
objdir_doc_cruft           = objs_doc_con
objdir_doc                 = docs/wx-manual.html
objdir_examples            = docs/examples
objdir_i18n                = locale

objdir_msw_shared          = objs_msw_sh
objdir_msw_static          = objs_msw_st
objdir_msw_dbg             = objs_msw_d
objdir_msw_install         = objs_msw_install

objdirs := $(objdir_wxbase_shared) $(objdir_wxbase_debug)                  \
	   $(objdir_gtk_shared) $(objdir_gtk_debug) $(objdir_gtk_install)  \
	   $(objdir_doc_cruft) $(objdir_doc) $(objdir_examples)            \
	   $(objdir_msw_shared) $(objdir_msw_static) $(objdir_msw_dbg)     \
	   $(objdir_msw_install)

#---------------------------------------------------------------------------
# Build stamps:

#	note that the i18n package is actually arch indep (once built)
#	but must be built (and installed) during the arch any phase as
#	it's pulled out of the wxGTK shared lib package.
#
#       similarly some of the wxpython packages are arch indep too, but
#       all files for it are installed during the arch any phase.


build_arch_stamps = build-wxbase-shared-stamp build-wxbase-debug-stamp    \
                    build-gtk-shared-stamp build-gtk-shared-contrib-stamp \
                    build-gtk-debug-stamp build-gtk-debug-contrib-stamp   \
                    build-i18n-stamp build-gtk-py-stamp build-gtk-dbg-py-stamp

build_indep_stamps = build-examples-stamp build-doc-stamp

build_cross_stamps = build-msw-shared-stamp build-msw-static-stamp build-msw-dbg-stamp

build_stamps_native := $(build_arch_stamps) $(build_indep_stamps)

build_stamps := $(build_stamps_native) $(build_cross_stamps)


#---------------------------------------------------------------------------
# Install targets:
install_all_arch = install-wxbase-lib install-wxbase-dev install-wxbase-dbg	\
                   install-gtk-lib install-gtk-dev install-gtk-dbg        	\
                   install-headers install-i18n install-gtk-py install-gtk-dbg-py

ifndef DEBIAN_WX_DEFAULT_VERSION
  install_all_arch += install-common
endif

install_all_indep = install-examples install-doc

install_all_cross = install-msw-dev install-msw-dbg install-headers-msw

install_all_native := $(install_all_arch) $(install_all_indep)

install_all := $(install_all_native) $(install_all_cross)



#---------------------------------------------------------------------------
# Setup Rules:

debian/control: debian/control.in debian/rules
	sed -e 's/=V/$(release)/g;                                          '\
'               s/=SOV/$(sorelease)/g;                                      '\
'               s/=U/$(unicode_suffix)/g;                                   '\
'               s/=PY_BUILD_DEPS/$(PY_BUILD_DEPS)/g                         '\
		< debian/control.in > debian/control

control-files-stamp: debian/control
	dh_testdir
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_wxbase_dev).$$f";    \
		sed -e 's/=V/$(release)/g;                                  '\
'			s/=PRIO/$(alt_prio)/g'                               \
			< debian/libwxbase-dev.$$f                           \
			> debian/$(package_wxbase_dev).$$f;                  \
	done;
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_wxbase_dbg).$$f";    \
		sed -e 's/=V/$(release)/g;                                  '\
'			s/=PRIO/$(alt_prio)/g'                               \
			< debian/libwxbase-dbg.$$f                           \
			> debian/$(package_wxbase_dbg).$$f;                  \
	done;
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_gtk_dev).$$f";       \
		sed -e 's/=V/$(release)/g;                                  '\
'			s/=PRIO/$(alt_prio)/g'                               \
			< debian/libwxgtk-dev.$$f                            \
			> debian/$(package_gtk_dev).$$f;                     \
	done;
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_gtk_dbg).$$f";       \
		sed -e 's/=V/$(release)/g;                                  '\
'			s/=PRIO/$(alt_prio)/g'                               \
			< debian/libwxgtk-dbg.$$f                            \
			> debian/$(package_gtk_dbg).$$f;                     \
	done;
	@for f in docs postinst prerm; do                                    \
		echo "generating control file $(package_gtk_py_lib).$$f";    \
		sed -e 's/=PYVERS/$(PYVERS)/g;                              '\
'			s|=WXPYDIR|$(wxpydir)|g;                            '\
'			s/=V/$(release)/g;                                  '\
'			s/=PRIO/$(alt_prio)/g'                               \
			< debian/python-wxgtk.$$f                            \
			> debian/$(package_gtk_py_lib).$$f;                  \
	done;
	@echo "generating control file $(package_gtk_dbg_py).docs";
	@cp debian/python-wxgtk.docs debian/$(package_gtk_dbg_py).docs;
	@for f in docs doc-base; do                                          \
		echo "generating control file $(package_doc).$$f";           \
		sed -e 's/=V/$(release)/g' < debian/wx-doc.$$f               \
			> debian/$(package_doc).$$f;                         \
	done;
	@for f in examples; do                                               \
		echo "generating control file $(package_examples).$$f";      \
		cp debian/wx-examples.$$f debian/$(package_examples).$$f;    \
	done;
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_msw_dev).$$f";       \
		sed -e 's/=V/$(release)/g;                                  '\
'			s/=H/$(cross_host)/g;                               '\
'			s/=PRIO/$(alt_prio)/g'                               \
			< debian/libwxmsw-dev.$$f                            \
			> debian/$(package_msw_dev).$$f;                     \
	done;
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_msw_dbg).$$f";       \
		sed -e 's/=V/$(release)/g;                                  '\
'			s/=H/$(cross_host)/g;                               '\
'			s/=PRIO/$(alt_prio)/g'                               \
			< debian/libwxmsw-dbg.$$f                            \
			> debian/$(package_msw_dbg).$$f;                     \
	done;
#	@echo "generating control file $(package_common).menu";              \
#		sed -e 's/=V/$(release)/g' < debian/wx-common.menu           \
#			> debian/$(package_common).menu;
	@echo "generating control file lintian-override";                    \
		sed -e 's/=V/$(release)/g;                                  '\
'			s/=SOV/$(sorelease)/g'                               \
			< debian/lintian-override.in                         \
			> debian/lintian-override;                           \
	touch $@

#---------------------------------------------------------------------------
# wx Build rules

build_arch: control-files-stamp $(build_arch_stamps)
build_all: control-files-stamp $(build_stamps_native)

# Really we should probably do nothing here until we know which
# binary target is being called, but alpha builds were exploding
# (compiler segfaults) in random places when building under fakeroot
# from the binary-arch target.  Build all -arch files here then, and
# let the -indep stuff fend for itself later.

build: build_arch


# The wx2.6 build system makes us run around in circles to get a separate
# libwxbase.  We need to configure it here in order to get the correct
# config files to use it alone, but there is no point building it as the
# wxgtk build is going to do that again anyway.  We'll move the relevant
# files out when that is done.  
#
# TODO: Is this still necessary?  Can we just take the wxbase files
# from the wxgui build now without special treatment?

configure-wxbase-shared-stamp:
	dh_testdir
	mkdir -p $(objdir_wxbase_shared)
	cd $(objdir_wxbase_shared) \
	    && ../configure $(BASE_CONFIGURE_OPTIONS)
	touch $@

build-wxbase-shared-stamp: configure-wxbase-shared-stamp
	dh_testdir
	# Nothing to build here, move along...
	#cd $(objdir_wxbase_shared) && $(FAST_MAKE)
	touch $@

configure-wxbase-debug-stamp:
	dh_testdir
	mkdir -p $(objdir_wxbase_debug)
	cd $(objdir_wxbase_debug) 					\
	    && ../configure $(BASE_CONFIGURE_OPTIONS) --enable-debug
	touch $@

build-wxbase-debug-stamp: configure-wxbase-debug-stamp
	dh_testdir
	# Nothing to build here, move along...
	#cd $(objdir_wxbase_debug) && $(FAST_MAKE)
	touch $@

configure-gtk-shared-stamp:
	dh_testdir
	mkdir -p $(objdir_gtk_shared)
	cd $(objdir_gtk_shared) \
	    && ../configure $(GTK_CONFIGURE_OPTIONS)
	touch $@

build-gtk-shared-stamp: configure-gtk-shared-stamp
	dh_testdir
	cd $(objdir_gtk_shared) && $(FAST_MAKE)
	touch $@


configure-gtk-debug-stamp:
	dh_testdir
	mkdir -p $(objdir_gtk_debug)
	cd $(objdir_gtk_debug) \
	    && ../configure $(GTK_CONFIGURE_OPTIONS) --enable-debug
	touch $@

build-gtk-debug-stamp: configure-gtk-debug-stamp
	dh_testdir
	cd $(objdir_gtk_debug) && $(FAST_MAKE)
	touch $@


build-gtk-shared-contrib-stamp: build-gtk-shared-stamp
	dh_testdir
	cd $(objdir_gtk_shared)/contrib/src && $(FAST_MAKE)
	cd $(objdir_gtk_shared)/utils/wxrc && $(FAST_MAKE)
	touch $@


build-gtk-debug-contrib-stamp: build-gtk-debug-stamp
	dh_testdir
	cd $(objdir_gtk_debug)/contrib/src && $(FAST_MAKE)
	touch $@


purge-dbg-py:
	@if [ ! -e build-gtk-py-stamp ]; then				\
		$(MAKE) -f debian/rules clean-py;			\
	fi
	$(RM) build-gtk-dbg-py-stamp

build-gtk-py-stamp: build-gtk-shared-stamp purge-dbg-py
	dh_testdir
	touch docs/lgpl.txt
	cd wxPython \
		&& $(python_ver) ./setup.py 	build			\
						WX_CONFIG='$(wxconfig)'	\
						WXPORT=$(pytoolkit)	\
						$(PY_UNICODE)		\
					    	FLAVOUR=$(DEBIAN_WXFLAVOUR)
	touch $@

build-doc-stamp: build-gtk-shared-stamp
	dh_testdir
	# the tarball may already have the generated docs in it
	if [ ! -e docs/html/wx/index.html ]; then \
		cd $(objdir_gtk_shared)/utils/tex2rtf/src && $(FAST_MAKE); \
		cd -; \
		rm -rf $(objdir_doc); \
		rm -rf $(objdir_doc_cruft); \
		mkdir $(objdir_doc); \
		mkdir $(objdir_doc_cruft); \
		cd $(objdir_doc_cruft); \
		LD_LIBRARY_PATH=../$(objdir_gtk_shared)/lib:$(LD_LIBRARY_PATH) \
		   ../$(objdir_gtk_shared)/utils/tex2rtf/src/tex2rtf           \
		   ../docs/latex/wx/manual.tex                                 \
		   ../$(objdir_doc)/wx$(release)-manual.html                   \
		   -twice -html;                                               \
		cd -; \
		cp docs/latex/wx/*.gif $(objdir_doc); \
		rm -rf $(objdir_doc_cruft); \
		rm -f $(objdir_doc)/wx$(release)-manual.{con,hh*,htx,ref}; \
	else \
		echo Copying docs...; \
		mkdir -p $(objdir_doc); \
		cp docs/html/wx/* $(objdir_doc); \
		mv $(objdir_doc)/index.html $(objdir_doc)/wx-$(release)-manual_contents.html; \
	fi
	touch $@

build-examples-stamp: build-gtk-shared-stamp
	dh_testdir
	mkdir -p $(objdir_examples)

	# copy all samples and the Makefile generated for libwxgtk.
	cp -a samples $(objdir_examples)
	rm -f $(objdir_examples)/samples/Makefile
	cp -a $(objdir_gtk_shared)/samples/Makefile $(objdir_examples)/samples

	cd $(objdir_examples)/samples					\
		&& find -name 'Makefile.in' -exec rm -f '{}' ';'	\
		&& for d in $$(find -type d); do			\
			if [ -f $$d/makefile.unx ]; then		\
				mv $$d/makefile.unx $$d/Makefile;	\
			fi;						\
		done							\

	cp -a wxPython/demo $(objdir_examples)/wxPython

	echo "generating install_examples.sh script";
	sed -e 's/=V/$(release)/g' < debian/unpack_examples.sh.in	\
				   > debian/unpack_examples.sh
	chmod 755 debian/unpack_examples.sh

	touch $@

build-i18n-stamp: build-gtk-shared-stamp
	dh_testdir

	# touch .po files first, since if they are not already up
	# to date then _now_ is not the time to fix it.
	# That should have been been done before cvs was tagged.
	cd $(objdir_i18n) \
		&& touch *.po \
		&& $(MAKE) allmo
	touch $@

purge-release-py:
	@if [ ! -e build-gtk-dbg-py-stamp ]; then			\
		$(MAKE) -f debian/rules clean-py;			\
	fi
	$(RM) build-gtk-py-stamp

build-gtk-dbg-py-stamp: build-gtk-debug-stamp purge-release-py
	dh_testdir
	touch docs/lgpl.txt
	cd wxPython							\
		&& $(python_ver) ./setup.py build			\
					    WX_CONFIG='$(wxconfig-dbg)' \
					    WXPORT=$(pytoolkit)		\
					    $(PY_UNICODE)		\
					    FLAVOUR=$(addsuffix -,$(DEBIAN_WXFLAVOUR))dbg
	touch $@


configure-msw-shared-stamp:
	dh_testdir
	mkdir -p $(objdir_msw_shared)
	cd $(objdir_msw_shared)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--cache-file=$(config_cache_cross)	\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)
	touch $@

build-msw-shared-stamp: configure-msw-shared-stamp
	dh_testdir
	cd $(objdir_msw_shared) && $(FAST_MAKE)
	touch $@

configure-msw-static-stamp:
	dh_testdir
	mkdir -p $(objdir_msw_static)
	cd $(objdir_msw_static)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--cache-file=$(config_cache_cross)	\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)	\
				--disable-shared
	touch $@

build-msw-static-stamp: configure-msw-static-stamp
	dh_testdir
	cd $(objdir_msw_static) && $(FAST_MAKE)
	touch $@

configure-msw-dbg-stamp:
	dh_testdir
	mkdir -p $(objdir_msw_dbg)
	cd $(objdir_msw_dbg)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--cache-file=$(config_cache_cross)	\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)	\
				--enable-debug
	touch $@

build-msw-dbg-stamp: configure-msw-dbg-stamp
	dh_testdir
	cd $(objdir_msw_dbg) && $(FAST_MAKE)
	touch $@

#---------------------------------------------------------------------------
# Cleaning rules

clean-py:
	cd wxPython && rm -rf licence build* docs/xml-raw wx/*.py src/__version__.py


clean: debian/control clean-py
	dh_testdir
	dh_testroot

	rm -rf config_deb.cache config_deb_cross.cache *-stamp $(objdirs)
	rm -f docs/lgpl.txt
	rm -f $(objdir_i18n)/*.mo

	dh_clean
	rm -f debian/$(package_wxbase_lib).*
	rm -f debian/$(package_wxbase_dev).*
	rm -f debian/$(package_wxbase_dbg).*
	rm -f debian/$(package_gtk_lib).*
	rm -f debian/$(package_gtk_dev).*
	rm -f debian/$(package_gtk_dbg).*
	rm -f debian/$(package_gtk_py_lib).*
	rm -f debian/$(package_headers).*
	rm -f debian/$(package_i18n).*
	rm -f debian/$(package_doc).*
	rm -f debian/$(package_examples).*
	rm -f debian/$(package_gtk_dbg_py).*
	rm -f debian/$(package_msw_dev).*
	rm -f debian/$(package_msw_dbg).*
	rm -f debian/lintian-override
	rm -f debian/unpack_examples.sh
	find -name '*.py[co]' | xargs -r rm -f
	rm -rf include/wx-$(release)


#---------------------------------------------------------------------------
# wx Install Rules

install_arch: build_arch $(install_all_arch)

install: build_all $(install_all_native)


install-wxbase-lib: DH_OPTIONS=-p$(package_wxbase_lib)
install-wxbase-lib: build-wxbase-shared-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	@# No, this is not a typo, we steal these libs from the gtk build.
	dh_install $(objdir_gtk_install)/lib/libwx_base*.so.*	usr/lib
	dh_installdirs usr/share/lintian/overrides
	cp debian/lintian-override debian/$(package_wxbase_lib)/usr/share/lintian/overrides/$(package_wxbase_lib)

install-wxbase-dev: DH_OPTIONS=-p$(package_wxbase_dev)
install-wxbase-dev: build-wxbase-shared-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	@# No, this is not a typo, we steal these libs from the gtk build.
	dh_install $(objdir_gtk_install)/lib/libwx_base*.so 	usr/lib
	dh_install $(objdir_wxbase_shared)/lib/wx/include 	usr/lib/wx
	dh_install $(objdir_wxbase_shared)/lib/wx/config/base*	usr/lib/wx/config

install-wxbase-dbg: DH_OPTIONS=-p$(package_wxbase_dbg)
install-wxbase-dbg: build-wxbase-debug-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	@# No, this is not a typo, we steal these libs from the gtk debug build.
	dh_install $(objdir_gtk_debug)/lib/libwx_base*		usr/lib
	dh_install $(objdir_wxbase_debug)/lib/wx/include	usr/lib/wx
	dh_install $(objdir_wxbase_debug)/lib/wx/config/base*	usr/lib/wx/config
	dh_installdirs usr/share/lintian/overrides
	cp debian/lintian-override debian/$(package_wxbase_dbg)/usr/share/lintian/overrides/$(package_wxbase_dbg)

install-gtk-shared-stamp: build-gtk-shared-stamp build-gtk-shared-contrib-stamp
	dh_testdir
	mkdir -p $(objdir_gtk_install)
	cd $(objdir_gtk_shared) \
		&& $(MAKE) install prefix=`pwd`/../$(objdir_gtk_install)
	cd $(objdir_gtk_shared)/contrib/src \
		&& $(MAKE) install prefix=`pwd`/../../../$(objdir_gtk_install)
	touch $@

install-gtk-lib: DH_OPTIONS=-p$(package_gtk_lib)
install-gtk-lib: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install $(objdir_gtk_install)/lib/libwx_gtk*.so.*	usr/lib
	dh_installdirs usr/share/lintian/overrides
	cp debian/lintian-override debian/$(package_gtk_lib)/usr/share/lintian/overrides/$(package_gtk_lib)

install-gtk-dev: DH_OPTIONS=-p$(package_gtk_dev)
install-gtk-dev: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install $(objdir_gtk_install)/lib/libwx_gtk*.so 	usr/lib
	dh_install $(objdir_gtk_install)/lib/wx/include 	usr/lib/wx
	dh_install $(objdir_gtk_install)/lib/wx/config/gtk* 	usr/lib/wx/config

install-gtk-dbg: DH_OPTIONS=-p$(package_gtk_dbg)
install-gtk-dbg: build-gtk-debug-stamp build-gtk-debug-contrib-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install $(objdir_gtk_debug)/lib/libwx_gtk*		usr/lib
	dh_install $(objdir_gtk_debug)/lib/wx/include		usr/lib/wx
	dh_install $(objdir_gtk_debug)/lib/wx/config/gtk*	usr/lib/wx/config
	dh_installdirs usr/share/lintian/overrides
	cp debian/lintian-override debian/$(package_gtk_dbg)/usr/share/lintian/overrides/$(package_gtk_dbg)


install-gtk-py-lib: DH_OPTIONS=-p$(package_gtk_py_lib)
install-gtk-py-lib: build-gtk-py-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs usr/lib/wx/python
	cd wxPython 								\
		&& $(python_ver) ./setup.py install 				\
			      --prefix=`pwd`/../debian/$(package_gtk_py_lib)/usr \
			      WX_CONFIG='$(wxconfig)'				\
			      SYS_WX_CONFIG='$(py_wxconfig)'			\
			      WXPORT=$(pytoolkit)				\
			      $(PY_UNICODE)					\
			      FLAVOUR=$(DEBIAN_WXFLAVOUR)

	mv debian/$(package_gtk_py_lib)/$(pydir)/wx.pth 			\
	   debian/$(package_gtk_py_lib)/usr/lib/wx/python/wx$(release).pth

	find debian/$(package_gtk_py_lib)/$(pydir) -name '*.py?' -exec rm '{}' ';'

	# This is rather bogus, its included in the main copyright file now though.
	rm -f debian/$(package_gtk_py_lib)/$(wxpydir)/wx/tools/XRCed/license.txt

install-gtk-py-ver: DH_OPTIONS=-p$(package_gtk_py_ver)
install-gtk-py-ver: install-gtk-py-lib
	dh_testdir
	dh_testroot
	dh_clean -k

ifndef DEBIAN_WX_DEFAULT_VERSION

	dh_movefiles --sourcedir=debian/$(package_gtk_py_lib) $(pydir)/wxversion.py
else
	rm debian/$(package_gtk_py_lib)/$(pydir)/wxversion.py
endif



install-gtk-py-tools: DH_OPTIONS=-p$(package_gtk_py_tools)
install-gtk-py-tools: install-gtk-py-ver
	dh_testdir
	dh_testroot
	dh_clean -k

ifndef DEBIAN_WX_DEFAULT_VERSION

	dh_movefiles --sourcedir=debian/$(package_gtk_py_lib) usr/bin

	dh_installman debian/wxPython-tools.1
	dh_link usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/img2py.1     \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/img2xpm.1    \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/img2png.1    \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pycrust.1    \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pyshell.1    \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/xrced.1      \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/helpviewer.1 \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pyalacarte.1 \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pyalamode.1  \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pywrap.1     \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pywxrc.1

	dh_installdirs usr/share/lintian/overrides
	cp debian/lintian-override debian/$(package_gtk_py_tools)/usr/share/lintian/overrides/$(package_gtk_py_tools)
endif
	mkdir -p debian/$(package_gtk_py_tools)/usr/share/pixmaps
	mkdir -p debian/$(package_gtk_py_tools)/usr/share/applications

	cp wxPython/wx/py/PyCrust_32.png        debian/$(package_gtk_py_tools)/usr/share/pixmaps/pycrust.png
	cp wxPython/wx/py/PyCrust_32.png        debian/$(package_gtk_py_tools)/usr/share/pixmaps/pyshell.png
	cp wxPython/wx/tools/XRCed/XRCed_32.png debian/$(package_gtk_py_tools)/usr/share/pixmaps/xrced.png
	cp debian/pycrust.desktop               debian/$(package_gtk_py_tools)/usr/share/applications
	cp debian/pyshell.desktop               debian/$(package_gtk_py_tools)/usr/share/applications
	cp debian/xrced.desktop                 debian/$(package_gtk_py_tools)/usr/share/applications

	rm -r debian/$(package_gtk_py_lib)/usr/bin

install-gtk-py-addons: DH_OPTIONS=-p$(package_gtk_py_addons)
install-gtk-py-addons: install-gtk-py-tools
	dh_testdir
	dh_testroot
	dh_clean -k
ifndef DEBIAN_WX_DEFAULT_VERSION

	dh_movefiles --sourcedir=debian/$(package_gtk_py_lib) $(pydir)/wxaddons
else
	rm -r debian/$(package_gtk_py_lib)/$(pydir)/wxaddons
endif


install-gtk-py: install-gtk-py-addons


install-common: DH_OPTIONS=-p$(package_common)
install-common: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_clean -k

	dh_install $(objdir_gtk_install)/share/bakefile/presets usr/share/bakefile
	dh_install $(objdir_gtk_install)/share/bakefile/presets/wx*.bkl usr/share/bakefile/presets

	dh_install $(objdir_gtk_install)/share/aclocal usr/share
	dh_installman debian/wx-config.1

	dh_install $(objdir_gtk_shared)/utils/wxrc/wxrc usr/bin
	dh_installman debian/wxrc-tools.1
	dh_link usr/share/man/man1/wxrc-tools.1 usr/share/man/man1/wxrc.1


install-headers: DH_OPTIONS=-p$(package_headers)
install-headers: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_clean -k

# The only way to be really sure we get the univ headers correct is to install
# them.  Do that in a scratch dirs, and move the gtk ones last, so at least
# they win in the result of any uncaught conflict.

#	cd $(objdir_gtk_univ) \
#		&& $(MAKE) install prefix=`pwd`/../$(objdir_univ_install)/usr

#	dh_movefiles --sourcedir=$(objdir_univ_install)
	dh_install $(objdir_gtk_install)/include 	usr

	# TODO:  Should probably use setup.py's install of the wxPython headers...
	mkdir -p debian/$(package_headers)/usr/include/wx-$(release)/wx/wxPython
	mkdir -p debian/$(package_headers)/usr/include/wx-$(release)/wx/wxPython/i_files
	cp -p wxPython/include/wx/wxPython/*.h \
	    debian/$(package_headers)/usr/include/wx-$(release)/wx/wxPython/
	cp -p wxPython/include/wx/wxPython/src/*.i wxPython/include/wx/wxPython/src/_*.py \
	    wxPython/include/wx/wxPython/src/*.swg \
	    debian/$(package_headers)/usr/include/wx-$(release)/wx/wxPython/i_files

install-i18n: DH_OPTIONS=-p$(package_i18n)
install-i18n: build-i18n-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install $(objdir_gtk_install)/share/locale 	usr/share


install-doc: DH_OPTIONS=-p$(package_doc)
install-doc: build-doc-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install $(objdir_doc) usr/share/doc/$(package_doc)

	@# Link this monstrosity with an overly obfuscated name
	@# to something that both people and browsers can expect to find.
	dh_link usr/share/doc/$(package_doc)/wx-manual.html/wx-$(release)-manual_contents.html \
		usr/share/doc/$(package_doc)/wx-manual.html/index.html


install-examples: DH_OPTIONS=-p$(package_examples)
install-examples: build-examples-stamp
	dh_testdir
	dh_testroot
	dh_clean -k

install-gtk-dbg-py: DH_OPTIONS=-p$(package_gtk_dbg_py)
install-gtk-dbg-py: build-gtk-dbg-py-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs usr/lib/wx/python
	cd wxPython 								\
		&& $(python_ver) ./setup.py install 				\
			      --prefix=`pwd`/../debian/$(package_gtk_dbg_py)/usr \
			      WX_CONFIG='$(wxconfig-dbg)'			\
			      SYS_WX_CONFIG='$(pyd_wxconfig)'			\
			      WXPORT=$(pytoolkit)				\
			      $(PY_UNICODE)					\
			      FLAVOUR=$(addsuffix -,$(DEBIAN_WXFLAVOUR))dbg

	mv debian/$(package_gtk_py_lib)/$(pydir)/wx.pth 			\
	   debian/$(package_gtk_py_lib)/usr/lib/wx/python/wx$(release)-dbg.pth

	find debian/$(package_gtk_dbg_py)/$(pydir) -name '*.py?' -exec rm '{}' ';'
	rm -rf usr/bin $(pydir)/{wxversion.py,wx.pth}

	# This is rather bogus, its included in the main copyright file now though.
	rm -f debian/$(package_gtk_dbg_py)/$(wxpydir)/wx/tools/XRCed/license.txt


install-msw-dev: DH_OPTIONS=-p$(package_msw_dev)
install-msw-dev: build-msw-shared-stamp build-msw-static-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install $(objdir_msw_shared)/lib/*.dll*		     usr/$(cross_host)/lib
	dh_install $(objdir_msw_shared)/lib/wx/include		     usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_shared)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	dh_install $(objdir_msw_static)/lib/*.a			     usr/$(cross_host)/lib
	dh_install $(objdir_msw_static)/lib/wx/include		     usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_static)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	$(cross_host)-strip --strip-debug debian/$(package_msw_dev)/usr/$(cross_host)/lib/*.a

	@# As a special case for the cross packages, we link their config
	@# under /usr as well as under the normal cross prefix.  This way
	@# --prefix=/usr/$(cross_host) and --prefix=/usr --host=$(cross_host)
	@# will have a congruent effect on wx-config.
	@( for f in `ls -1 debian/$(package_msw_dev)/usr/$(cross_host)/lib/wx/config`; do \
	      all_cfg="$${all_cfg} usr/$(cross_host)/lib/wx/config/$$f usr/lib/wx/config/$$f"; \
	      echo "linking cross config /usr/$(cross_host)/lib/wx/config/$$f"; \
	   done;                                                                \
	   dh_link $${all_cfg};                                                 \
	 )

install-msw-dbg: DH_OPTIONS=-p$(package_msw_dbg)
install-msw-dbg: build-msw-dbg-stamp
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_install $(objdir_msw_dbg)/lib/*.dll*			  usr/$(cross_host)/lib
	dh_install $(objdir_msw_dbg)/lib/wx/include		  usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_dbg)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	# No static lib, they're freakin' huge!
	#$(cross_host)-strip --strip-debug debian/$(package_msw_dbg)/usr/$(cross_host)/lib/*.a

	@( for f in `ls -1 debian/$(package_msw_dbg)/usr/$(cross_host)/lib/wx/config`; do \
	      all_cfg="$${all_cfg} usr/$(cross_host)/lib/wx/config/$$f usr/lib/wx/config/$$f"; \
	      echo "linking cross config /usr/$(cross_host)/lib/wx/config/$$f"; \
	   done;                                                                \
	   dh_link $${all_cfg};                                                 \
	 )

install-headers-msw: DH_OPTIONS=-p$(package_headers_msw)
install-headers-msw:
	dh_testdir
	dh_testroot
	dh_clean -k

	cd $(objdir_msw_shared) \
		&& $(MAKE) install prefix=`pwd`/../$(objdir_msw_install)

#	Symlink all the headers that will be installed by the main -headers
#	package to where the cross compiler will expect them.
	@( for f in `ls -1 $(objdir_msw_install)/include/wx-$(release)/wx`; do  \
	      all_h="$${all_h} usr/include/wx-$(release)/wx/$$f usr/$(cross_host)/include/wx-$(release)/wx/$$f"; \
	      echo "linking header /usr/include/wx-$(release)/wx/$$f"; \
	   done;                                                       \
	   dh_link $${all_h};                                          \
	 )

#	But install this lot for real.
	rm -f debian/$(package_headers_msw)/usr/$(cross_host)/include/wx-$(release)/wx/msw
	dh_install $(objdir_msw_install)/include/wx-$(release)/wx/msw  usr/$(cross_host)/include/wx-$(release)/wx


#---------------------------------------------------------------------------
# Tying it all together


binary-indep: build_all install
	dh_testdir -i
	dh_testroot -i
	dh_installdocs -i
	dh_installchangelogs -i
	dh_installexamples -i
	dh_installmenu -i
ifdef NO_PYCENTRAL
	dh_python -i
else
	dh_pycentral -i
endif
	dh_link -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i


binary-arch: build_arch install_arch
	dh_testdir -a
	dh_testroot -a
	dh_installdocs -a
	dh_installchangelogs -a
	dh_installexamples -a
	dh_installmenu -a

	rm -rf debian/$(package_gtk_dbg_py)/usr/share/doc/$(package_gtk_dbg_py)
	ln -s $(package_gtk_py_lib) debian/$(package_gtk_dbg_py)/usr/share/doc/$(package_gtk_dbg_py)

ifdef NO_PYCENTRAL
	dh_python -a
else
	dh_pycentral -a
endif

# Don't strip debug libs at all, and strip cross libs elsewhere
# with the cross host tools until dh_strip gets smarter.
	dh_strip -p$(package_gtk_py_lib) --dbg-package=$(package_gtk_dbg_py) 
	dh_strip -N$(package_gtk_dbg) -N$(package_wxbase_dbg) \
		 -N$(package_msw_dev) -N$(package_msw_dbg) \
		 -N$(package_gtk_py_lib) -N$(package_gtk_dbg_py)

	dh_link -a
	dh_compress -a
	dh_fixperms -a
	dh_makeshlibs -N$(package_gtk_py_lib) -N$(package_gtk_dbg_py) -V
	dh_installdeb -a
	dh_shlibdeps -ldebian/$(package_wxbase_lib)/usr/lib:debian/$(package_wxbase_dbg)/usr/lib:debian/$(package_gtk_lib)/usr/lib:debian/$(package_gtk_dbg)/usr/lib
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a


# Build all packages target.
binary: binary-indep binary-arch 



# This is a special target for building the wxMSW-cross packages.
# It's not currently called during the official package build run
# but may be run separately to build the extra packages.
# There is an implied build dep on the mingw32 cross compiler 
# that is not in the control file.
binary-cross: control-files-stamp $(install_all_cross)
	$(MAKE) -f debian/rules \
		DH_OPTIONS="-p$(package_msw_dev) -p$(package_msw_dbg) -p$(package_headers_msw)" \
		binary-common


############################################################################
#
# Some rules to build a subset of the complete list of packages that can be
# built from CVS.  Beware that packages produced with these rules may *NOT*
# be compatible with packages built using the 'binary' target or even with
# Debian policy.  Do not distribute packages built with these rules, they
# are currently useful for rapid in-house testing by developers only.

DH_OPTIONS_GTK := -p$(package_wxbase_lib) -p$(package_gtk_lib) -p$(package_headers)

# libwxgtk shared lib package
binary-gtk: control-files-stamp install-gtk-lib install-wxbase-lib install-headers
	$(MAKE) -f debian/rules DH_OPTIONS="$(DH_OPTIONS_GTK)" binary-common

binary-gtk-dev: control-files-stamp install-gtk-dev install-wxbase-dev install-headers
	$(MAKE) -f debian/rules \
	    DH_OPTIONS="-p$(package_wxbase_dev) -p$(package_gtk_dev) $(DH_OPTIONS_GTK)" \
	    binary-common

binary-gtk-dbg: control-files-stamp install-gtk-dbg install-wxbase-dbg install-headers
	$(MAKE) -f debian/rules \
	    DH_OPTIONS="-p$(package_wxbase_dbg) -p$(package_gtk_dbg) -p$(package_headers)" \
	    binary-common


# docs package
binary-doc: control-files-stamp install-doc
	$(MAKE) -f debian/rules DH_OPTIONS=-p$(package_doc) binary-common

binary-fast:control-files-stamp install-gtk-dbg install-msw-dev install-headers install-headers-msw
	$(MAKE) -f debian/rules DH_OPTIONS="-p$(package_gtk_dbg) -p$(package_msw_dev) -p$(package_headers) -p$(package_headers_msw)" binary-common


.PHONY: build build_all build_arch					\
	clean clean-py purge-release-py purge-dbg-py			\
	binary-indep binary-arch binary binary-common 			\
	binary-gtk binary-gtk-dev binary-gtk-dbg			\
	binary-wxbase binary-wxbase-dev binary-wxbase-dbg		\
	binary-doc binary-cross binary-dbg-py				\
	install install_arch install-gtk-lib install-gtk-dev 		\
        install-gtk-dbg                                             	\
	install-gtk-py install-gtk-py-tools install-gtk-py-ver		\
	install-gtk-py-lib install-gtk-dbg-py				\
	install-common install-headers install-i18n install-doc         \
	install-examples install-msw-dev install-msw-dbg install-headers-msw

