/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// (C) Kriss Daniels 2003 http://www.XIXs.com
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
#include "all.h"





/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// allocate an poly
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
bool t3d_poly::setup(void)
{
	DMEM_ZERO(this);

	return true;
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// allocate an poly
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
bool t3d_poly::reset(void)
{
	clean();
	return setup();
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// allocate an poly
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void t3d_poly::clean(void)
{
}



/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// allocate an poly
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
t3d_poly *thunk3d::AllocPoly(void)
{
t3d_poly *ret;


	if(!(ret=(t3d_poly *)polys->alloc()))
	{
		DBG_Error("Failed to allocate thunk3D.poly.\n");
		goto bogus;
	}

	if(!ret->setup())
	{
		DBG_Error("Failed to setup thunk3D.poly.\n");
		goto bogus;
	}

	DLIST_PASTE(polys->atoms->last,ret,0);

	return ret;

bogus:
	FreePoly(ret);
	return 0;
}

/*+-----------------------------------------------------------------------------------------------------------------+*/
//
// free an poly
//
/*+-----------------------------------------------------------------------------------------------------------------+*/
void thunk3d::FreePoly(t3d_poly *item)
{
	if(item)
	{
		DLIST_CUT(item);

		item->clean();

		polys->free((llatom*)item);
	}
}

