BUGS:

- The use of 'static' and "one time" initialization of things is not suitable
to a situation where a Lua state is run, using Lanes, then terminated. If
another Lua state later is launched, the initializations will get cramped.

Reported by Boris Ouretskey (25-Jun-09)


- a 'require "lanes"' and speedy exit from the process causes a segfault
  on ArchLinux (reported by kkndrox@gmail.com 1-Jun-2009). 
  
  This issue is not reproducible on Ubuntu (8.04 or 9.04) and has not therefore
  been fixed. A patch is welcome. The issue is most likely caused by the 
  Linda thread not being properly launched when the process itself already
  quits.

<<  
With Lanes 2.0.3, the following code *always* gives me a segmentation
fault:

-- begin
require("lanes")
-- end

But this:

-- begin
require("lanes")
garbagecollect('collect')
-- end

always work.

Based on this experimentation, if I require lanes and the program end
without any garbage collecting, I receive a segmentation fault.
I'm using Arch Linux (32bits), Lua 5.1.4 and it was compiled with gcc 4.3
<<

    Also simply waiting a bit ('os.execute("sleep 1")') avoids the crash.


- tests/irayo_closure.lua fails     (trouble with setting globals right
    for functions carried over to another Lua state)

- "make appendud" causes a segfault on OS X PowerPC.
