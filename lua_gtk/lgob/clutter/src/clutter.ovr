include('clutter.def')

-- TODO: clutter_color_set_components, clutter_vertex_set_values

undef{
	'cogl_get_modelview_matrix',
	'clutter_color_set_components',
	'clutter_event_get_code',
	'clutter_event_get_symbol',
	'clutter_event_get_unicode',
	'clutter_event_get_x',
	'clutter_event_get_y',
	'clutter_geometry_get_height',
	'clutter_geometry_get_width',
	'clutter_geometry_get_x',
	'clutter_geometry_get_y',
	'clutter_vertex_set_values',
	'clutter_script_add_search_paths',
	'clutter_double_to_unit',
	'clutter_actor_box_get_x1',
	'clutter_actor_box_get_x2',
	'clutter_actor_box_get_y1',
	'clutter_actor_box_get_y2',
	'CLUTTER_UNITS_FROM_DEVICE',
	'CLUTTER_UNITS_TO_DEVICE',
    'clutter_timeline_do_tick'
}

undefPattern('cogl.+')
undefPattern('pango.+')

defOverride('clutter_actor_destroy', [[
	Object* obj = lua_touserdata(L, 1);
	clutter_actor_destroy(obj->pointer);
	obj->need_unref = FALSE;
	
	return 0;
]])

-- toplevel must be destroyed manually
defFunction('clutter_stage_new',
	{
		class = 'ClutterStage',
		constructor = false,
		since = '0.8',
		ret = 'GObject* full'
	}
)

defFunction('clutter_color_from_string',
	{
	}
)

defOverride('clutter_color_from_string', [[
	ClutterColor color;
	clutter_color_from_string(&color, lua_tostring(L, 1));
	boxed_new(L, CLUTTER_TYPE_COLOR, &color);
		
	return 1;
]])

defFunction('clutter_geometry_get',
	{
	}
)

defOverride('clutter_geometry_get', [[
	Object* obj = lua_touserdata(L, 1);
	ClutterGeometry* ptr = obj->pointer;
	 
	lua_pushinteger(L, ptr->x);
	lua_pushinteger(L, ptr->y);
	lua_pushinteger(L, ptr->width);
	lua_pushinteger(L, ptr->height);
	
	return 4; 
]])

defFunction('clutter_actor_box_get',
	{
	}
)

defOverride('clutter_actor_box_get', [[
	Object* obj = lua_touserdata(L, 1);
	ClutterActorBox* ptr = obj->pointer;
	 
	lua_pushinteger(L, ptr->x1);
	lua_pushinteger(L, ptr->y1);
	lua_pushinteger(L, ptr->x2);
	lua_pushinteger(L, ptr->y2);
	
	return 4; 
]])

defFunction('clutter_init_once',
	{
	}
)

defOverride('clutter_init_once', [[
	static gboolean initialized = FALSE;
	if(initialized) return 0;
	
	int argc = 1;
	char** argv = g_malloc(argc * sizeof(char*));

	lua_pushliteral(L, "arg");
	lua_rawget(L, LUA_GLOBALSINDEX);

	if(!lua_istable(L, -1))
		argv[0] = "lgob";
	else
	{
		lua_pushnumber(L, 0);
		lua_rawget(L, -2);
		argv[0] = (char*)luaL_optstring(L, -1, "lgob");
	}

	lua_pushinteger(L, clutter_init(&argc, &argv));
	g_free(argv);
	
	initialized = TRUE;
	return 1;
]])
