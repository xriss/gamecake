-- Include the generated definitions
include('gtk.def')

-- Undef some deprecated namespaces, since gir can't handle some
undef{
    'GtkArg',
    'GtkArgFlags',
    'GtkButtonAction',
    'GtkCell',
    'GtkCellPixmap',
    'GtkCellPixText',
    'GtkCellText',
    'GtkCellType',
    'GtkCellWidget',
    'GtkClassInitFunc',
    'GtkCList',
    'GtkCListCellInfo',
    'GtkCListColumn',
    'GtkCListCompareFunc',
    'GtkCListDestInfo',
    'GtkCListDragPos',
    'GtkCListRow',
    'GtkCombo',
    'GtkCTree',
    'GtkCTreeCompareDragFunc',
    'GtkCTreeExpanderStyle',
    'GtkCTreeExpansionType',
    'GtkCTreeFunc',
    'GtkCTreeGNodeFunc',
    'GtkCTreeLineStyle',
    'GtkCTreeNode',
    'GtkCTreePos',
    'GtkCTreeRow',
    'GtkDestroyNotify',
    'GtkDitherInfo',
    'GtkEnumValue',
    'GtkFileSelection',
    'GtkFlagValue',
    'GtkFundamentalType',
    'GtkItemFactory',
    'GtkItemFactoryCallback',
    'GtkItemFactoryCallback1',
    'GtkItemFactoryCallback2',
    'GtkItemFactoryEntry',
    'GtkItemFactoryItem',
    'GtkList',
    'GtkListItem',
    'GtkMatchType',
    'GtkObject',
    'GtkObjectInitFunc',
    'GtkOldEditable',
    'GtkOptionMenu',
    'GtkPixmap',
    'GtkPreview',
    'GtkPreviewInfo',
    'GtkPreviewType',
    'GtkPrintFunc',
    'GtkPropertyMark',
    'GtkSideType',
    'GtkSignalFunc',
    'GtkSignalMarshaller',
    'GtkSignalRunType',
    'GtkSubmenuDirection',
    'GtkSubmenuPlacement',
    'GtkText',
    'GtkTextFont',
    'GtkTextFunction',
    'GtkTipsQuery',
    'GtkToolbarChild',
    'GtkToolbarChildType',
    'GtkToolItem::set-tooltip',
    'GtkTooltips',
    'GtkTooltipsData',
    'GtkTree',
    'GtkTreeItem',
    'GtkTreeViewMode',
    'GtkType',
    'GtkTypeClass',
    'GtkTypeInfo',
    'GtkTypeObject',
    'GtkCurve',
    'gtk_style_get_property',
}

-- Undef some problematic things.
undef{
    'gtk_entry_set_icon_drag_source',
    'gtk_icon_theme_set_search_path',
    'GtkArrowPlacement',
    'GtkEntryIconPosition',
    'GtkPrivateFlags',
    'gtk_list_store_newv',
    'gtk_tree_store_newv',
    'gtk_tree_store_set_column_types',
    'gtk_list_store_set_column_types',
    'gtk_tree_selection_get_user_data',
    'gtk_entry_get_current_icon_drag_source',
    'GtkBindingArg',
    'GtkBindingEntry',
    'GtkBindingSet',
    'GtkBindingSignal',
    'GtkTextBTree',
    'GtkTextLogAttrCache',
    'GtkWidgetAuxInfo',
    'GtkWidgetShapeInfo',
    'GtkWindowGeometryInfo',
    'signal_data',
    'data',
    'd',
    'u',
    'pt',
    'pm',
    'gtk_image_set',
    'gtk_image_get',
    'gtk_im_context_simple_add_table',
    'gtk_text_anchored_child_set_layout',
    'gtk_text_child_anchor_queue_resize',
    'gtk_text_child_anchor_register_child',
    'gtk_text_child_anchor_unregister_child',
}

-- Some unhandled gir-specific
undef{
    'gtk_allocation_get_height',
    'gtk_allocation_get_width',
    'gtk_allocation_get_x',
    'gtk_allocation_get_y',
    'gtk_requisition_get_height',
    'gtk_requisition_get_width',
    'gtk_widget_get_flags',
    'gtk_window_get_xid'
}

undefPattern('Image.-Data')
undefPattern('.-Iface')
undefPattern('gtk_text_layout.+')

fixVersion('gtk_paper_size_is_custom', '2.10')
fixVersion('gtk_info_bar_get_type', '2.18')
fixVersion('gtk_tool_shell_get_text_orientation', '2.20')
fixVersion('gtk_tool_shell_get_text_alignment', '2.20')
fixVersion('gtk_tool_shell_get_ellipsize_mode', '2.20')
fixVersion('gtk_tool_shell_get_text_size_group', '2.20')
fixVersion('gtk_window_group_get_current_grab', '2.22')
fixVersion('gtk_window_has_group', '2.90')
fixVersion('gtk_window_group_get_current_grab', '2.22')
fixVersion('gtk_menu_item_set_submenu', nil, nil, '2.12')
fixVersion('gtk_tree_view_column_set_sort_column_id', nil, nil, '2.18')
fixVersion('gtk_tree_view_column_get_sort_column_id', nil, nil, '2.18')

-- Implement some unhandled functions

defOverride('gtk_list_store_new', [[
    int size = lua_gettop(L), i;
    GType* types = g_malloc(sizeof(GType) * size);

    /* Fill the types array */
    for(i = 1; i <= size; i++)
    {
        types[i - 1] = g_type_from_name(lua_tostring(L, i));
    }

    GtkListStore* ptr = gtk_list_store_newv(size, types);
    object_new(L, ptr, TRUE);
    g_free(types);

    return 1;
]])

defFunction('gtk_tree_iter_new',
    {
        class = 'GtkTreeIter'
    }
)

defOverride('gtk_tree_iter_new', [[
    GtkTreeIter* ptr = g_malloc(sizeof(GtkTreeIter));
    struct_new(L, ptr, TRUE);

    return 1;
]])

defFunction('gtk_text_iter_new',
    {
        class = 'GtkTextIter'
    }
)

defOverride('gtk_text_iter_new', [[
    GtkTextIter* ptr = g_malloc(sizeof(GtkTextIter));
    struct_new(L, ptr, TRUE);

    return 1;
]])

defOverride('gtk_list_store_set', [[
    int size = lua_gettop(L), i;
    gpointer list = ((Object*)lua_touserdata(L, 1))->pointer;
    GtkTreeIter*  iter = (GtkTreeIter*)((Object*)lua_touserdata(L, 2))->pointer;
    lua_getfield(L, LUA_REGISTRYINDEX, "lgobValueSet");

#if GTK_CHECK_VERSION(2, 12, 0)
    /* {model, iter, key, val, ...} */
    int nvals = (size - 2) / 2;

    /* Alocate the temp GValue array  */
    int vsize = sizeof(GValue) * nvals;
    GValue* vals = g_malloc(vsize);
    GValue* val;
    memset(vals, 0, vsize);

    /* Allocate the columns array */
    int* cols = g_malloc(sizeof(int) * nvals);

    /* Get the fields by field */
    for(i = 3; i <= size; i += 2)
    {
        int column = lua_tointeger(L, i);
        GType type = gtk_tree_model_get_column_type(list, column);

        /* Current pair */
        int curr = (i - 3) / 2;
        cols[curr] = column;
        val = &vals[curr];

        g_value_init(val, type);
        lua_pushvalue(L, size + 1); /* "lgobValueSet" */
        lua_pushlightuserdata(L, val);
        lua_pushvalue(L, i + 1);
        lua_call(L, 2, 0);
    }

    /* Ok, now we have the array with the values. Set them with one hit! */
    gtk_list_store_set_valuesv(list, iter, cols, vals, nvals);

    /* Now unset them all */
    for(i = 0; i < nvals; ++i)
        g_value_unset(&vals[i]);

    /* Free the dinamic alocated arrays */
    g_free(vals);
    g_free(cols);
#else
        /* Get the fields by field */
        for(i = 3; i <= size; i += 2)
        {
                int column = lua_tointeger(L, i);
                GType type = gtk_tree_model_get_column_type(list, column);
                GValue value = { 0 };
                GValue* val = &value;

                g_value_init(val, type);
                lua_pushvalue(L, size + 1); /* "lgobValueSet" */
                lua_pushlightuserdata(L, val);
                lua_pushvalue(L, i + 1);
                lua_call(L, 2, 0);
                /* modify value and unset var */
                gtk_list_store_set_value(list, iter, column, val);
                g_value_unset(val);
        }

#endif
    return 0;
]])

defOverride('gtk_tree_model_get', [[
    int size = lua_gettop(L), i;
    gpointer model = ((Object*)lua_touserdata(L, 1))->pointer;
    GtkTreeIter*  iter  = ((Object*)lua_touserdata(L, 2))->pointer;
    lua_getfield(L, LUA_REGISTRYINDEX, "lgobValuePush");

    /* Get field by field */
    for(i = 3; i <= size; ++i)
    {
        int column = lua_tointeger(L, i);

        GValue val = {0};
        gtk_tree_model_get_value(model, iter, column, &val);
        lua_pushvalue(L, size + 1);
        lua_pushlightuserdata(L, &val);
        lua_call(L, 1, 1);
        g_value_unset(&val);
    }

    return size - 2;
]])

defFunction('gtk_list_store_seto',
    {
        class = 'GtkListStore'
    }
)

defOverride('gtk_list_store_seto', [[
    int size = lua_gettop(L), i;
    gpointer list = ((Object*)lua_touserdata(L, 1))->pointer;
    GtkTreeIter*  iter = (GtkTreeIter*)((Object*)lua_touserdata(L, 2))->pointer;
    lua_getfield(L, LUA_REGISTRYINDEX, "lgobValueSet");

#if GTK_CHECK_VERSION(2, 12, 0)
    /* {model, iter, val, val, ...} */
    int nvals = (size - 2);

    /* Alocate the temp GValue array  */
    int vsize = sizeof(GValue) * nvals;
    GValue* vals = g_malloc(vsize);
    GValue* val;
    memset(vals, 0, vsize);

    /* Allocate the columns array */
    int* cols = g_malloc(sizeof(int) * nvals);

    /* Get the fields by field */
    for(i = 3; i <= size; ++i)
    {
        int column = i - 3;
        GType type = gtk_tree_model_get_column_type(list, column);

        /* Current pair */
        cols[column] = column;
        val = &vals[column];

        g_value_init(val, type);
        lua_pushvalue(L, size + 1); /* "lgobValueSet" */
        lua_pushlightuserdata(L, val);
        lua_pushvalue(L, i);
        lua_call(L, 2, 0);
    }

    /* Ok, now we have the array with the values. Set them with one hit! */
    gtk_list_store_set_valuesv(list, iter, cols, vals, nvals);

    /* Now unset them all */
    for(i = 0; i < nvals; ++i)
        g_value_unset(&vals[i]);

    /* Free the dinamic alocated arrays */
    g_free(vals);
    g_free(cols);
#else
        /* Get the fields by field */
        for(i = 3; i <= size; ++i)
        {
                int column = i - 3;
                GType type = gtk_tree_model_get_column_type(list, column);

                GValue value = { 0 };
                GValue* val = &value;

                g_value_init(val, type);
                lua_pushvalue(L, size + 1); /* "lgobValueSet" */
                lua_pushlightuserdata(L, val);
                lua_pushvalue(L, i);
                lua_call(L, 2, 0);

                /* modify value and unset var */
                gtk_list_store_set_value(list, iter, column, val);
                g_value_unset(val);
        }
#endif
    return 0;
]])

defOverride('gtk_about_dialog_set_email_hook', [[
    /* Deactivating it? */
    if( lua_isnoneornil(L, 1) )
    {
        gtk_about_dialog_set_url_hook(NULL, NULL, NULL);
    }
    else
    {
        int size = lua_gettop(L);
        int ud_ref = -1;
        /* User data? */

        if(size > 1)
            ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        lua_pushvalue(L, 1);
        int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        Data* data = g_malloc(sizeof(Data));
        data->L = L;
        data->function_ref = function_ref;
        data->ud_ref = ud_ref;

        gtk_about_dialog_set_email_hook((GtkAboutDialogActivateLinkFunc)hook_callback,
            data, callback_free);
    }

    return 0;
]])

defOverride('gtk_about_dialog_set_url_hook', [[
    /* Deactivating it? */
    if( lua_isnoneornil(L, 1) )
    {
        gtk_about_dialog_set_url_hook(NULL, NULL, NULL);
    }
    else
    {
        int size = lua_gettop(L);
        int ud_ref = -1;

        /* User data? */
        if(size > 1)
            ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        lua_pushvalue(L, 1);
        int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        Data* data = g_malloc(sizeof(Data));
        data->L = L;
        data->function_ref = function_ref;
        data->ud_ref = ud_ref;

        gtk_about_dialog_set_url_hook((GtkAboutDialogActivateLinkFunc)hook_callback,
            data, callback_free);
    }

    return 0;
]])

defOverride('gtk_builder_get_objects', [[
    Object* obj = lua_touserdata(L, 1);

    GSList* list = gtk_builder_get_objects(obj->pointer);
    lua_pushliteral(L, "lgobGSList2table");
    lua_rawget(L, LUA_REGISTRYINDEX);
    lua_pushlightuserdata(L, list);
    lua_pushinteger(L, TYPE_OBJECT);
    lua_call(L, 2, 1);

    /* Free the list (the content will be Garbage-collected) */
    g_slist_free(list);

    return 1;
]])

defOverride('gtk_container_child_set', [[
    int i, size = lua_gettop(L);
    Object* con = lua_touserdata(L, 1);
    Object* obj = lua_touserdata(L, 2);
    const char* property = NULL;
    gpointer klass = G_OBJECT_GET_CLASS(con->pointer);

    /* Set the properties, pair by pair */
    for(i = 3; i <= size; i += 2)
    {
        /* Get the property */
        property = lua_tostring(L, i);

        /* Set the value */
        GParamSpec* spec = gtk_container_class_find_child_property(klass, property);

        if(!spec)
            luaL_error(L, "The GObject doesn't have the property %s!", property);

        GValue val = {0};
        g_value_init(&val, spec->value_type);
        lua_getfield(L, LUA_REGISTRYINDEX, "lgobValueSet");
        lua_pushlightuserdata(L, &val);
        lua_pushvalue(L, i + 1);
        lua_call(L, 2, 0);
        gtk_container_child_set_property(con->pointer, obj->pointer, property, &val);
        g_value_unset(&val);
    }

    return 0;
]])

defOverride('gtk_container_child_get', [[
    int i, size = lua_gettop(L);
    Object* con = lua_touserdata(L, 1);
    Object* obj = lua_touserdata(L, 2);
    const char* property = NULL;
    gpointer klass = G_OBJECT_GET_CLASS(con->pointer);

    for(i = 3; i <= size; ++i)
    {
        property = lua_tostring(L, i);

        /* Get the value */
        GParamSpec* spec = gtk_container_class_find_child_property(klass, property);

        if(!spec)
            luaL_error(L, "The GObject doesn't have the property %s!", property);

        GValue val = {0};
        g_value_init(&val, spec->value_type);
        gtk_container_child_get_property(con->pointer, obj->pointer, property, &val);
        lua_getfield(L, LUA_REGISTRYINDEX, "lgobValuePush");
        lua_pushlightuserdata(L, &val);
        lua_call(L, 1, 1);
        g_value_unset(&val);
    }

    return i - 3;
]])

defOverride('gtk_container_get_children', [[
    Object* obj = lua_touserdata(L, 1);

    GList* children = gtk_container_get_children(obj->pointer);
    lua_pushliteral(L, "lgobGList2table");
    lua_rawget(L, LUA_REGISTRYINDEX);
    lua_pushlightuserdata(L, children);
    lua_pushinteger(L, TYPE_OBJECT);
    lua_call(L, 2, 1);

    g_list_free(children);

    return 1;
]])

defOverride('gtk_icon_view_get_path_at_pos', [[
    Object* obj = lua_touserdata(L, 1);

    GtkTreePath* path = gtk_icon_view_get_path_at_pos(obj->pointer,
        lua_tointeger(L, 2), lua_tointeger(L, 3));

    if(path == NULL)
        return 0;

    gchar* spath = gtk_tree_path_to_string(path);

    lua_pushstring(L, spath);
    gtk_tree_path_free(path);
    g_free(spath);

    return 1;
]])

defOverride('gtk_icon_view_get_selected_items', [[
    Object* obj = lua_touserdata(L, 1);
    GList* list = gtk_icon_view_get_selected_items(obj->pointer);

    lua_pushliteral(L, "lgobGList2table");
    lua_rawget(L, LUA_REGISTRYINDEX);
    lua_pushlightuserdata(L, list);
    lua_pushinteger(L, TYPE_CUSTOM);
    lua_pushcfunction(L, tree_path_handler);
    lua_call(L, 3, 1);

    /* Free the list */
    g_list_foreach (list, (GFunc)gtk_tree_path_free, NULL);
    g_list_free(list);

    return 1;
]])

defOverride('gtk_tree_path_new', [[
    GtkTreePath* path = gtk_tree_path_new();
    special_type_new(L, "gtkTreePathMT", path);
    return 1;
]])

defOverride('gtk_tree_path_new_from_string', [[
    GtkTreePath* path = gtk_tree_path_new_from_string(lua_tostring(L, 1));
    special_type_new(L, "gtkTreePathMT", path);
    return 1;
]])

defType('GtkTreePath',
    {
        gc = 'gtk_tree_path_free',
    }
)

defOverride('gtk_tree_store_new', [[
    int size = lua_gettop(L), i;
    GType* types = g_malloc(sizeof(GType) * size);

    /* Fill the types array */
    for(i = 1; i <= size; i++)
        types[i - 1] = g_type_from_name(lua_tostring(L, i));

    GtkTreeStore* ptr = gtk_tree_store_newv(size, types);
    object_new(L, ptr, TRUE);
    g_free(types);

    return 1;
]])

defOverride('gtk_tree_store_set', [[
    int size = lua_gettop(L), i;
    gpointer tree = ((Object*)lua_touserdata(L, 1))->pointer;
    GtkTreeIter*  iter = (GtkTreeIter*)((Object*)lua_touserdata(L, 2))->pointer;
    lua_getfield(L, LUA_REGISTRYINDEX, "lgobValueSet");

#if GTK_CHECK_VERSION(2, 12, 0)
    /* {model, iter, key, val, ...} */
    int nvals = (size - 2) / 2;

    /* Allocate the temp GValue array  */
    int vsize = sizeof(GValue) * nvals;
    GValue* vals = g_malloc(vsize);
    GValue* val;
    memset(vals, 0, vsize);

    /* Alocate the columns array */
    int* cols = g_malloc(sizeof(int) * nvals);

    /* Get the fields by field */
    for(i = 3; i <= size; i += 2)
    {
        int column = lua_tointeger(L, i);
        GType type = gtk_tree_model_get_column_type(tree, column);

        /* Current pair */
        int curr = (i - 3) / 2;
        cols[curr] = column;
        val = &vals[curr];

        g_value_init(val, type);
        lua_pushvalue(L, size + 1); /* "lgobValueSet" */
        lua_pushlightuserdata(L, val);
        lua_pushvalue(L, i + 1);
        lua_call(L, 2, 0);
    }

    /* Ok, now we have the array with the values. Set them with one hit! */
    gtk_tree_store_set_valuesv(tree, iter, cols, vals, nvals);

    /* Now unset them all */
    for(i = 0; i < nvals; ++i)
        g_value_unset(&vals[i]);

    /* Free the dinamic alocated arrays */
    g_free(vals);
    g_free(cols);
#else
        /* {model, iter, key, val, ...} */
        /* Get the fields by field */
        for(i = 3; i <= size; i += 2)
        {
                int column = lua_tointeger(L, i);
                GType type = gtk_tree_model_get_column_type(tree, column);
            GValue value = { 0 };
            GValue* val = &value;

                g_value_init(val, type);
                lua_pushvalue(L, size + 1); /* "lgobValueSet" */
                lua_pushlightuserdata(L, val);
                lua_pushvalue(L, i + 1);
                lua_call(L, 2, 0);
            /* modify value and unset var */
            gtk_tree_store_set_value(tree, iter, column, val);
            g_value_unset(val);
        }
#endif

    return 0;
]])

defFunction('gtk_tree_store_seto',
    {
        class = 'GtkTreeStore'
    }
)

defOverride('gtk_tree_store_seto', [[
int size = lua_gettop(L), i;
    gpointer tree = ((Object*)lua_touserdata(L, 1))->pointer;
    GtkTreeIter*  iter = (GtkTreeIter*)((Object*)lua_touserdata(L, 2))->pointer;
    lua_getfield(L, LUA_REGISTRYINDEX, "lgobValueSet");

#if GTK_CHECK_VERSION(2, 12, 0)
    /* {model, iter, val, val, ...} */
    int nvals = (size - 2);

    /* Alocate the temp GValue array  */
    int vsize = sizeof(GValue) * nvals;
    GValue* vals = g_malloc(vsize);
    GValue* val;
    memset(vals, 0, vsize);

    /* Allocate the columns array */
    int* cols = g_malloc(sizeof(int) * nvals);

    /* Get the fields by field */
    for(i = 3; i <= size; ++i)
    {
        int column = i - 3;
        GType type = gtk_tree_model_get_column_type(tree, column);

        /* Current pair */
        cols[column] = column;
        val = &vals[column];

        g_value_init(val, type);
        lua_pushvalue(L, size + 1); /* "lgobValueSet" */
        lua_pushlightuserdata(L, val);
        lua_pushvalue(L, i);
        lua_call(L, 2, 0);
    }

    /* Ok, now we have the array with the values. Set them with one hit! */
    gtk_tree_store_set_valuesv(tree, iter, cols, vals, nvals);

    /* Now unset them all */
    for(i = 0; i < nvals; ++i)
        g_value_unset(&vals[i]);

    /* Free the dinamic alocated arrays */
    g_free(vals);
    g_free(cols);
#else
        /* Get the fields by field */
        for(i = 3; i <= size; ++i)
        {
                int column = i - 3;
                GType type = gtk_tree_model_get_column_type(tree, column);

            GValue value = { 0 };
            GValue* val = &value;

                g_value_init(val, type);
                lua_pushvalue(L, size + 1); /* "lgobValueSet" */
                lua_pushlightuserdata(L, val);
                lua_pushvalue(L, i);
                lua_call(L, 2, 0);

            /* modify value and unset var */
            gtk_tree_store_set_value(tree, iter, column, val);
            g_value_unset(val);
        }
#endif

    return 0;
]])

defOverride('gtk_tree_selection_get_selected', [[
    Object* obj = lua_touserdata(L, 1);
    Object* iter = lua_touserdata(L, 2);

    GtkTreeModel* tm = NULL;

    gboolean res = gtk_tree_selection_get_selected(obj->pointer, &tm, iter->pointer);
    lua_pushboolean(L, res);
    object_new(L, tm, FALSE);

    return 2;
]])

defOverride('gtk_tree_selection_get_selected_rows', [[
    Object* obj = lua_touserdata(L, 1);
    GtkTreeModel* tm = NULL; /* Always NULL. Why? */

    GList* list = gtk_tree_selection_get_selected_rows(obj->pointer, &tm);

    lua_pushliteral(L, "lgobGList2table");
    lua_rawget(L, LUA_REGISTRYINDEX);
    lua_pushlightuserdata(L, list);
    lua_pushinteger(L, TYPE_CUSTOM);
    lua_pushcfunction(L, tree_path_handler);
    lua_call(L, 3, 1);

    /* Free the list */
    g_list_foreach(list, (GFunc)gtk_tree_path_free, NULL);
    g_list_free(list);

    return 1;
]])

defOverride('gtk_tree_view_column_new_with_attributes', [[
    int size = lua_gettop(L), i;
    Object* obj = lua_touserdata(L, 2);

    /* Create the column */
    GtkTreeViewColumn* ptr = gtk_tree_view_column_new_with_attributes(lua_tostring(L, 1), obj->pointer, NULL);

    /* Add other attributes */
    for(i = 3; i <= size; i += 2)
        gtk_tree_view_column_add_attribute(ptr, obj->pointer, lua_tostring(L, i), lua_tonumber(L, i + 1));


    object_new(L, ptr, FALSE);
    return 1;
]])

defOverride('gtk_tree_view_get_path_at_pos', [[
    Object* obj = lua_touserdata(L, 1);
    GtkTreePath* path = NULL;
    GtkTreeViewColumn* col = NULL;
    gint cell_x, cell_y;

    gboolean res = gtk_tree_view_get_path_at_pos(obj->pointer,
        lua_tointeger(L, 2), lua_tointeger(L, 3), &path, &col, &cell_x, &cell_y);

    if(path == NULL)
    {
        lua_pushboolean(L, FALSE);
        return 1;
    }

    gchar* spath = gtk_tree_path_to_string(path);

    lua_pushboolean(L, res);
    lua_pushstring(L, spath);
    object_new(L, col, FALSE);
    lua_pushinteger(L, cell_x);
    lua_pushinteger(L, cell_y);

    gtk_tree_path_free(path);
    g_free(spath);

    return 5;
]])

defOverride('gtk_tree_sortable_get_sort_column_id', [[
    gint id;
    GtkSortType order;

    Object* obj = lua_touserdata(L, 1);
    gboolean res = gtk_tree_sortable_get_sort_column_id(obj->pointer,
        &id, &order);

    lua_pushboolean(L, res);
    lua_pushinteger(L, id);
    lua_pushinteger(L, order);

    return 3;
]])

defOverride('gtk_tree_sortable_set_sort_func', [[
    int size = lua_gettop(L);
    int ud_ref = -1;
    Object* obj = lua_touserdata(L, 1);

    /* User data? */
    if(size > 3)
        ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);

    lua_pushvalue(L, 3);
    int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

    Data* data = g_malloc(sizeof(Data));
    data->L = L;
    data->function_ref = function_ref;
    data->ud_ref = ud_ref;

    gtk_tree_sortable_set_sort_func(obj->pointer, lua_tointeger(L, 2),
    (GtkTreeIterCompareFunc)sort_callback, data, callback_free);

    return 0;
]])

defEnum('GtkStrangeSortColumn',
    {
        ['GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID'] = -2,
        ['GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID'] = -1,
    }
)

defFunction('gtk_clipboard_wait_for_image',
    {
        class = 'GtkClipboard',
        ret = 'GObject* full constructor',
        args = {'GObject* none'}
    }
)

defOverride('gtk_text_buffer_create_tag', [[
    Object* obj = lua_touserdata(L, 1);

    GtkTextTag* ptr = gtk_text_buffer_create_tag(obj->pointer, lua_tostring(L, 2), NULL);
    object_new(L, ptr, FALSE);

    return 1;
]])

defOverride('gtk_text_buffer_insert_with_tags', [[
    Object* obj = lua_touserdata(L, 1);
    Object* stc = lua_touserdata(L, 2);

    /* Get the start offset */
    gint len = lua_tointeger(L, 4), i;
    gint start_offset = gtk_text_iter_get_offset(stc->pointer);

    /* Insert the text */
    gtk_text_buffer_insert(obj->pointer, stc->pointer, lua_tostring(L, 3), len);

    /* Get the initial iterator */
    GtkTextIter start;
    gtk_text_buffer_get_iter_at_offset(obj->pointer, &start, start_offset);

    /* Apply the tags */
    for(i = 5; i <= lua_gettop(L); ++i)
    {
        Object* tag = lua_touserdata(L, i);
        gtk_text_buffer_apply_tag(obj->pointer, tag->pointer, &start, stc->pointer);
    }

    return 0;
]])

defOverride('gtk_file_chooser_dialog_new', [[
    int i, size = lua_gettop(L);
    GtkWindow* parent = NULL;

    if(lua_type(L, 2) == LUA_TUSERDATA)
    {
        Object* obj = lua_touserdata(L, 2);
        parent = obj->pointer;
    }

    gpointer ptr = gtk_file_chooser_dialog_new(lua_tostring(L, 1), parent,
        lua_tointeger(L, 3), lua_tostring(L, 4), lua_tointeger(L, 5), NULL);

    /* The buttons */
    for(i = 6; i <= size; i += 2)
        gtk_dialog_add_button(ptr, lua_tostring(L, i), lua_tonumber(L, i + 1));

    object_new(L, ptr, FALSE);
    return 1;
]])

defOverride('gtk_file_chooser_get_filenames', [[
    Object* obj = lua_touserdata(L, 1);

    GSList* files = gtk_file_chooser_get_filenames(obj->pointer);
    lua_pushliteral(L, "lgobGSList2table");
    lua_rawget(L, LUA_REGISTRYINDEX);
    lua_pushlightuserdata(L, files);
    lua_pushinteger(L, TYPE_STRING);
    lua_call(L, 2, 1);

    g_slist_foreach (files, (GFunc)g_free, NULL);
    g_slist_free (files);

    return 1;
]])

defFunction('gtk_tree_model_filter_convert_child_iter_to_iter',
    {
        class = 'GtkTreeModelFilter',
        since = '2.4',
        deprecated = '2.10',
        args = {'GObject* none', 'struct* none', 'struct* none'},
    }
)

defFunction('gtk_tree_model_filter_convert_child_iter_to_iter',
    {
        class = 'GtkTreeModelFilter',
        since = '2.10',
        args = {'GObject* none', 'struct* none', 'struct* none'},
        ret = 'boolean none'
    }
)

defFunction('gtk_tree_model_sort_convert_child_iter_to_iter',
    {
        class = 'GtkTreeModelSort',
        since = '2.0',
        deprecated = '2.14',
        args = {'GObject* none', 'struct* none', 'struct* none'},
    }
)

defFunction('gtk_tree_model_sort_convert_child_iter_to_iter',
    {
        class = 'GtkTreeModelSort',
        since = '2.14',
        args = {'GObject* none', 'struct* none', 'struct* none'},
        ret = 'boolean none'
    }
)

defOverride('gtk_menu_popup', [[
    /* Simplify the task! Very incomplete. */
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);

    gtk_menu_popup(obj->pointer, NULL, NULL, NULL, NULL,
    0, gtk_get_current_event_time());

    return 0;
]])

defFunction('gtk_menu_popup_from_status_icon',
    {
        class = 'GtkMenu',
        since = "2.10",
    }
)

defOverride('gtk_menu_popup_from_status_icon', [[
    /* Lazy */
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj1 = lua_touserdata(L, 1);
    Object* obj2 = lua_touserdata(L, 2);

    gtk_menu_popup(GTK_MENU(obj1->pointer), NULL, NULL, gtk_status_icon_position_menu,
        obj2->pointer, 0, gtk_get_current_event_time());

    return 0;
]])

defOverride('gtk_tree_model_filter_set_visible_func', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TFUNCTION);

    int size = lua_gettop(L);
    int ud_ref = -1;
    Object* obj = lua_touserdata(L, 1);

    /* User data? */
    if(size > 2)
        ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);

    lua_pushvalue(L, 2);
    int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

    Data* data = g_malloc(sizeof(Data));
    data->L = L;
    data->function_ref = function_ref;
    data->ud_ref = ud_ref;

    gtk_tree_model_filter_set_visible_func(obj->pointer,
    (GtkTreeModelFilterVisibleFunc)visible_callback, data, callback_free);

    return 0;
]])

defFunction('gtk_entry_completion_set_text_column',
    {
        class = 'GtkEntryCompletion',
        since = '2.4',
        args = {'GObject* none', 'int none'}
    }
)

defOverride('gtk_editable_insert_text', [[
    Object* oarg1 = lua_touserdata(L, 1);
    void* arg1 = oarg1 ? oarg1->pointer : NULL;

    int arg4 = lua_tointeger(L, 4);
    gtk_editable_insert_text(arg1, lua_tostring(L, 2), lua_tointeger(L, 3), &arg4);
    lua_pushinteger(L, arg4);

    return 1;
]])

defOverride('gtk_container_add', [[
    /* Get the container */
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* container = lua_touserdata(L, 1);

    int top = lua_gettop(L), i;
    Object* children = NULL;

    /* Add widget by widget */
    for(i = 2; i <= top; i++)
    {
        luaL_checktype(L, i, LUA_TUSERDATA);
        children = lua_touserdata(L, i);;
        gtk_container_add(container->pointer, children->pointer);
    }

    return 0;
]])

defOverride('gtk_dialog_add_buttons', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    int size = lua_gettop(L), i;
    Object* obj = lua_touserdata(L, 1);

    for(i = 2; i <= size; i += 2)
    {
        GtkWidget* ptr = gtk_dialog_add_button(obj->pointer, lua_tostring(L, i), lua_tonumber(L, i + 1));
        object_new(L, ptr, FALSE);
    }

    return (size - 1) / 2;
]])

defOverride('gtk_accel_group_connect', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TSTRING);
    luaL_checktype(L, 3, LUA_TFUNCTION);

    int ud_ref = -1;

    if(lua_gettop(L) >= 4)
    {
        luaL_checkany(L, 4);
        ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);
    }

    lua_pushvalue(L, 3);
    int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

    Object* obj = lua_touserdata(L, 1);
    Data* data = g_malloc(sizeof(Data));
    data->L = L;
    data->function_ref = function_ref;
    data->ud_ref = ud_ref;

    /* We need only the user data, not the GClosure */
    data->signal_info.param_types = NULL;
    data->signal_info.n_params = 0;

    /* Build the closure */
    lua_pushliteral(L, "lgobClosureNew");
    lua_rawget(L, LUA_REGISTRYINDEX);
    lua_pushlightuserdata(L, data);
    lua_call(L, 1, 1);
    GClosure* closure = lua_touserdata(L, -1);

    /* Temp storage, to parse the keys */
    guint key;
    GdkModifierType modifier;
    gtk_accelerator_parse(lua_tostring(L, 2), &key, &modifier);
    gtk_accel_group_connect(obj->pointer, key, modifier, GTK_ACCEL_VISIBLE, closure);

    return 0;
]])

defOverride('gtk_container_remove', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* container = lua_touserdata(L, 1);

    int top = lua_gettop(L), i;
    Object* children = NULL;

    for(i = 2; i <= top; i++)
    {
        luaL_checktype(L, i, LUA_TUSERDATA);
        children = lua_touserdata(L, i);;
        gtk_container_remove(container->pointer, children->pointer);
    }

    return 0;
]])

defFunction('gtk_dialog_get_vbox',
    {
        class = 'GtkDialog',
        deprecated = '2.14'
    }
)

-- Older versions of GTK doesn't exposes the vbox as a method or property
defOverride('gtk_dialog_get_vbox', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);

    GtkWidget* ptr = GTK_DIALOG(obj->pointer)->vbox;
    object_new(L, ptr, FALSE);

    return 1;
]])

-- Older versions of GTK doesn't exposes the window as a method or property
undef{'gtk_widget_get_window'}
defFunction('gtk_widget_get_window',
    {
        class = 'GtkWidget',
    }
)

defOverride('gtk_widget_get_window', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);

    GdkWindow* ptr = GTK_WIDGET(obj->pointer)->window;
    object_new(L, ptr, FALSE);

    return 1;
]])

defFunction('gtk_widget_get_size',
    {
        class = 'GtkWidget',
        since = 0.1
    }
)

defFunction('gtk_widget_get_pos',
    {
        class = 'GtkWidget',
        since = 0.1
    }
)

defOverride('gtk_widget_get_size', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);

    lua_pushnumber(L, GTK_WIDGET(obj->pointer)->allocation.width);
    lua_pushnumber(L, GTK_WIDGET(obj->pointer)->allocation.height);

    return 2;
]])

defOverride('gtk_widget_get_pos', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);

    lua_pushnumber(L, GTK_WIDGET(obj->pointer)->allocation.x);
    lua_pushnumber(L, GTK_WIDGET(obj->pointer)->allocation.y);

    return 2;
]])

defFunction('gtk_print_run_page_setup_dialog',
    {
        since = '2.10',
        args = {'GObject* none', 'GObject* none', 'GObject* none'},
        ret = 'GObject* full',
    }
)

defFunction('gtk_print_context_get_size',
    {
        class = 'GtkPrintContext',
        since = '2.10',
    }
)

defOverride('gtk_print_context_get_size',
[[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);

    lua_pushnumber(L, gtk_print_context_get_width(GTK_PRINT_CONTEXT(obj->pointer)));
    lua_pushnumber(L, gtk_print_context_get_height(GTK_PRINT_CONTEXT(obj->pointer)));

    return 2;
]])

defOverride('gtk_print_context_get_cairo_context', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);

    cairo_t* ptr = gtk_print_context_get_cairo_context(obj->pointer);
    lua_getfield(L, LUA_REGISTRYINDEX, "cairoContextPush");
    lua_pushlightuserdata(L, ptr);
    lua_pushboolean(L, FALSE);
    lua_call(L, 2, 1);

    return 1;
]])

defFunction('gtk_combo_box_new_text',
    {
        class = 'GtkComboBox',
        constructor = true,
        since = '2.4',
        ret = 'GObject* full'
    }
)

defOverride('gtk_tree_view_column_set_cell_data_func', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TUSERDATA);

    Object* obj1 = lua_touserdata(L, 1);
    Object* obj2 = lua_touserdata(L, 2);

    if( lua_type(L, 3) != LUA_TFUNCTION )
        gtk_tree_view_column_set_cell_data_func(obj1->pointer, obj2->pointer,
            NULL, NULL, NULL);
    else
    {
        int size = lua_gettop(L);
        int ud_ref = -1;

        if(size > 3)
            ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        lua_pushvalue(L, 3);
        int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        Data* data = g_malloc(sizeof(Data));
        data->L = L;
        data->function_ref = function_ref;
        data->ud_ref = ud_ref;

        gtk_tree_view_column_set_cell_data_func(obj1->pointer, obj2->pointer,
            (GtkTreeCellDataFunc)cell_layout_data_callback, data, callback_free);
    }

    return 0;
]])

defOverride('gtk_tree_view_column_set_cell_data_func', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TUSERDATA);

    Object* obj1 = lua_touserdata(L, 1);
    Object* obj2 = lua_touserdata(L, 2);

    if( lua_type(L, 3) != LUA_TFUNCTION )
        gtk_tree_view_column_set_cell_data_func(obj1->pointer, obj2->pointer,
            NULL, NULL, NULL);
    else
    {
        int size = lua_gettop(L);
        int ud_ref = -1;

        if(size > 3)
            ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        lua_pushvalue(L, 3);
        int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        Data* data = g_malloc(sizeof(Data));
        data->L = L;
        data->function_ref = function_ref;
        data->ud_ref = ud_ref;

        gtk_tree_view_column_set_cell_data_func(obj1->pointer, obj2->pointer,
            (GtkTreeCellDataFunc)cell_layout_data_callback, data, callback_free);
    }

    return 0;
]])

defOverride('gtk_cell_layout_set_cell_data_func', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TUSERDATA);

    Object* obj1 = lua_touserdata(L, 1);
    Object* obj2 = lua_touserdata(L, 2);

    if( lua_type(L, 3) != LUA_TFUNCTION )
        gtk_cell_layout_set_cell_data_func(obj1->pointer, obj2->pointer,
            NULL, NULL, NULL);
    else
    {
        int size = lua_gettop(L);
        int ud_ref = -1;

        if(size > 3)
            ud_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        lua_pushvalue(L, 3);
        int function_ref = luaL_ref(L, LUA_REGISTRYINDEX);

        Data* data = g_malloc(sizeof(Data));
        data->L = L;
        data->function_ref = function_ref;
        data->ud_ref = ud_ref;

        gtk_cell_layout_set_cell_data_func(obj1->pointer, obj2->pointer,
            (GtkCellLayoutDataFunc)cell_layout_data_callback, data, callback_free);
    }

    return 0;
]])

defOverride('gtk_tree_model_foreach', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TFUNCTION);

    int top = lua_gettop(L);

    Object* obj = lua_touserdata(L, 1);
    lua_pushvalue(L, 2);

    if(top > 2)
        lua_pushvalue(L, 3);
    else
        lua_pushnil(L);

    gtk_tree_model_foreach(GTK_TREE_MODEL(obj->pointer),
        (GtkTreeModelForeachFunc)tree_foreach_callback, L);

    return 0;
]])

defFunction('gtk_widget_set_flags',
    {
        class = 'GtkWidget',
        since = '2.0',
    }
)

defFunction('gtk_widget_unset_flags',
    {
        class = 'GtkWidget',
        since = '2.0',
    }
)

defOverride('gtk_widget_set_flags', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TNUMBER);

    Object* obj = lua_touserdata(L, 1);
    GTK_WIDGET_SET_FLAGS(obj->pointer, lua_tointeger(L, 2));

    return 0;
]])

defOverride('gtk_widget_unset_flags', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TNUMBER);

    Object* obj = lua_touserdata(L, 1);
    GTK_WIDGET_UNSET_FLAGS(obj->pointer, lua_tointeger(L, 2));

    return 0;
]])

defFunction('gtk_accelerator_parse',
    {
        since = '0.1',
        args = {'char* none', 'unsigned int* full', 'unsigned int* full'}
    }
)

defFunction('gtk_get_current_event_state',
    {
        since = '0.1',
        args = {'unsigned int* full'},
        ret = 'boolean none'
    }
)

defFunction('gtk_rc_parse_priority',
    {
        since = '0.1',
        args = {'struct* none', 'unsigned int* full'},
        ret = 'unsigned int none'
    }
)

defFunction('gtk_rc_parse_state',
    {
        since = '0.1',
        args = {'struct* none', 'unsgined int* full'},
        ret = 'unsigned int none'
    }
)

defFunction('gtk_scrolled_window_get_policy',
    {
        class = 'GtkScrolledWindow',
        since = '0.1',
        args = {'GObject* none', 'unsigned int* full', 'unsigned int* full'}
    }
)

defOverride('gtk_message_dialog_new', [[
    Object* obj1 = lua_touserdata(L, 1);

    GtkWidget* ptr = gtk_message_dialog_new(obj1 ? obj1->pointer : NULL,
        lua_tointeger(L, 2), lua_tointeger(L, 3), lua_tointeger(L, 4),
        NULL);

    object_new(L, ptr, FALSE);
    return 1;
]])

defOverride('gtk_drag_dest_set', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);

    Object* obj1 = lua_touserdata(L, 1);
    Object* obj2 = lua_touserdata(L, 3);

    gtk_drag_dest_set(
        obj1->pointer,
        lua_tointeger(L, 2),
        obj2 ? obj2->pointer : NULL,
        lua_tointeger(L, 4),
        lua_tointeger(L, 5)
    );

    return 0;
]])

defOverride('gtk_drag_source_set', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);

    Object* obj1 = lua_touserdata(L, 1);
    Object* obj2 = lua_touserdata(L, 3);

    gtk_drag_source_set(
        obj1->pointer,
        lua_tointeger(L, 2),
        obj2 ? obj2->pointer : NULL,
        lua_tointeger(L, 4),
        lua_tointeger(L, 5)
    );

    return 0;
]])

defOverride('gtk_builder_connect_signals_full', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TFUNCTION);

    int size = lua_gettop(L);
    if(size < 3) lua_pushnil(L);

    Object* obj = lua_touserdata(L, 1);
    gtk_builder_connect_signals_full(obj->pointer, (GtkBuilderConnectFunc)builder_connect_callback, L);

    lua_settop(L, size);

    return 0;
]])

defFunction('gtk_tree_model_iter_next',
    {
        class = 'GtkTreeModel',
        since = '0.1',
        args = {'GObject* none', 'struct* none'},
        ret = 'boolean none'
    }
)

defFunction('gtk_tree_model_filter_new',
    {
        class = 'GtkTreeModelFilter',
        since = '2.4',
        args = {'GObject* none', 'struct* none'},
        ret = 'GObject* full',
        constructor = true
    }
)

defFunction('gtk_tree_model_sort_new_with_model',
    {
        class = 'GtkTreeModelSort',
        since = '0.1',
        args = {'GObject* none'},
        ret = 'GObject* full',
        constructor = true
    }
)

defOverride('gtk_tree_model_get_path', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TUSERDATA);

    Object* obj1 = lua_touserdata(L, 1);
    Object* obj2 = lua_touserdata(L, 2);

    GtkTreePath* path = gtk_tree_model_get_path(obj1->pointer, obj2->pointer);
    special_type_new(L, "gtkTreePathMT", path);

    return 1;
]])

defOverride('gtk_tree_path_get_indices', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	luaL_checktype(L, 2, LUA_TNUMBER);

	Object* obj1 = lua_touserdata(L, 1);

	gint* indices = gtk_tree_path_get_indices(obj1->pointer);
	gint indices_depth = gtk_tree_path_get_depth(obj1->pointer);
	gint i;

	lua_newtable(L);

	for(i=0; i<indices_depth; i++){
		lua_pushnumber(L, i+1);
		lua_pushnumber(L, indices[lua_tointeger(L, 2)]);
		lua_settable(L, -3);
	}
	return 1;
]])
