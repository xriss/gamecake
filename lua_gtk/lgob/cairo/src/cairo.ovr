include('cairo.def')

-- To remove support for a surface, just remove the include
include('png.def')
include('pdf.def')
include('svg.def')
include('ps.def')

-- Redefine skipLib to handle this special case
function skipLib(name, defLib)
	local _, _, newn = name:find(defLib .. '(.+)')
	return newn or name
end

defType('Context',
	{
		gc = 'cairo_destroy',
	}
)

defType('FontExtents',
	{
		gc = 'cairo_font_extents_destroy',
	}
)

defType('TextExtents',
	{
		gc = 'cairo_text_extents_destroy',
	}
)

defType('Matrix',
	{
		gc = 'cairo_matrix_destroy',
	}
)

defType('Pattern',
	{
		gc = 'cairo_pattern_destroy',
	}
)

defType('Surface',
	{
		gc = 'cairo_surface_destroy',
	}
)

defType('ImageSurface',
	{
		parent = 'Surface',
		gc = 'cairo_surface_destroy',
	}
)

defOverride('cairo_create', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* object	= lua_touserdata(L, 1);

	cairo_t* ptr = cairo_create(object->pointer);
	priv_struct_new(L, ptr, TRUE, "cairoContextMT");

	return 1;
]])

defOverride('cairo_destroy',
[[
	Object* obj = lua_touserdata(L, 1);
	
	if(obj->need_unref)
	{
		cairo_destroy(obj->pointer);
		obj->need_unref = FALSE;
	}
	
	return 0;
]])

defOverride('cairo_matrix_destroy',
[[
	Object* obj = lua_touserdata(L, 1);
	
	if(obj->need_unref)
	{
		free(obj->pointer);
		obj->need_unref = FALSE;
	}
	
	return 0;
]])

defOverride('cairo_matrix_create', [[
	cairo_matrix_t* ptr = malloc(sizeof(cairo_matrix_t));
	priv_struct_new(L, ptr, TRUE, "cairoMatrixMT");
	
	return 1;
]])

defOverride('cairo_matrix_transform_distance', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	double i1 = lua_tonumber(L, 2);
	double i2 = lua_tonumber(L, 3);
	
	cairo_matrix_transform_distance(obj->pointer, &i1, &i2);
	
	lua_pushnumber(L, i1);
	lua_pushnumber(L, i2);
	
	return 2;
]])

defOverride('cairo_matrix_transform_point', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	double i1 = lua_tonumber(L, 2);
	double i2 = lua_tonumber(L, 3);
	
	cairo_matrix_transform_point(obj->pointer, &i1, &i2);
	
	lua_pushnumber(L, i1);
	lua_pushnumber(L, i2);
	
	return 2;
]])

defOverride('cairo_get_target', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* object	= lua_touserdata(L, 1);

	cairo_surface_t* ptr = cairo_get_target(object->pointer);
	priv_struct_new(L, ptr, FALSE, "cairoSurfaceMT");

	return 1;
]])

defOverride('cairo_get_group_target', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* object	= lua_touserdata(L, 1);

	cairo_surface_t* ptr = cairo_get_group_target(object->pointer);
	priv_struct_new(L, ptr, FALSE, "cairoSurfaceMT");

	return 1;
]])

defOverride('cairo_get_source', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* object	= lua_touserdata(L, 1);

	cairo_pattern_t* ptr = cairo_get_source(object->pointer);
	priv_struct_new(L, ptr, FALSE, "cairoPatternMT");

	return 1;
]])

defOverride('cairo_set_dash', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	luaL_checktype(L, 2, LUA_TTABLE);
	luaL_checktype(L, 3, LUA_TNUMBER);
	luaL_checktype(L, 4, LUA_TNUMBER);
	
	int size = lua_tointeger(L, 3);
	Object* obj = lua_touserdata(L, 1);
	double* array = tableToDoubleArray(L, 2, size);
	cairo_set_dash(obj->pointer, array, size, lua_tonumber(L, 4));
	free(array);
	
	return 0;
]])

defOverride('cairo_user_to_device', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	double i1 = lua_tonumber(L, 2);
	double i2 = lua_tonumber(L, 3);
	
	cairo_user_to_device(obj->pointer, &i1, &i2);
	
	lua_pushnumber(L, i1);
	lua_pushnumber(L, i2);
	
	return 2;
]])

defOverride('cairo_user_to_device_distance', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	double i1 = lua_tonumber(L, 2);
	double i2 = lua_tonumber(L, 3);
	
	cairo_user_to_device_distance(obj->pointer, &i1, &i2);
	
	lua_pushnumber(L, i1);
	lua_pushnumber(L, i2);
	
	return 2;
]])

defOverride('cairo_device_to_user', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	double i1 = lua_tonumber(L, 2);
	double i2 = lua_tonumber(L, 3);
	
	cairo_device_to_user(obj->pointer, &i1, &i2);
	
	lua_pushnumber(L, i1);
	lua_pushnumber(L, i2);
	
	return 2;
]])

defOverride('cairo_device_to_user_distance', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	double i1 = lua_tonumber(L, 2);
	double i2 = lua_tonumber(L, 3);
	
	cairo_device_to_user_distance(obj->pointer, &i1, &i2);
	
	lua_pushnumber(L, i1);
	lua_pushnumber(L, i2);
	
	return 2;
]])

defOverride('cairo_pattern_destroy',
[[
	Object* obj = lua_touserdata(L, 1);
	
	if(obj->need_unref)
	{
		cairo_pattern_destroy(obj->pointer);
		obj->need_unref = FALSE;
	}
	
	return 0;
]])

defOverride('cairo_pattern_create_rgb',
[[
	cairo_pattern_t* ptr = cairo_pattern_create_rgb(lua_tonumber(L, 1), 
		lua_tonumber(L, 2), lua_tonumber(L, 3));
		
	priv_struct_new(L, ptr, TRUE, "cairoPatternMT");
	return 1;
]])

defOverride('cairo_pattern_create_rgba',
[[
	cairo_pattern_t* ptr = cairo_pattern_create_rgb(lua_tonumber(L, 1), 
		lua_tonumber(L, 2), lua_tonumber(L, 3));
		
	priv_struct_new(L, ptr, TRUE, "cairoPatternMT");
	return 1;
]])

defOverride('cairo_pattern_create_for_surface',
[[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	
	cairo_pattern_t* ptr = cairo_pattern_create_for_surface(obj->pointer);
	priv_struct_new(L, ptr, TRUE, "cairoPatternMT");
	return 1;
]])

defOverride('cairo_pattern_create_linear',
[[
	cairo_pattern_t* ptr = cairo_pattern_create_linear(lua_tonumber(L, 1), 
		lua_tonumber(L, 2), lua_tonumber(L, 3), lua_tonumber(L, 4));
		
	priv_struct_new(L, ptr, TRUE, "cairoPatternMT");
	return 1;
]])

defOverride('cairo_pattern_create_radial',
[[
	cairo_pattern_t* ptr = cairo_pattern_create_radial(lua_tonumber(L, 1), 
		lua_tonumber(L, 2), lua_tonumber(L, 3), lua_tonumber(L, 4), 
		lua_tonumber(L, 5), lua_tonumber(L, 6));
		
	priv_struct_new(L, ptr, TRUE, "cairoPatternMT");
	return 1;
]])

defOverride('cairo_surface_destroy',
[[
	Object* obj = lua_touserdata(L, 1);
	
	if(obj->need_unref)
	{
		cairo_surface_destroy(obj->pointer);
		obj->need_unref = FALSE;
	}
	
	return 0;
]])

defOverride('cairo_surface_create_similar',
[[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	
	cairo_surface_t* ptr = cairo_surface_create_similar(obj->pointer, 
		lua_tointeger(L, 2), lua_tointeger(L, 3), lua_tointeger(L, 4));
		
	priv_struct_new(L, ptr, TRUE, "cairoSurfaceMT");
	return 1;
]])

defOverride('cairo_image_surface_create',
[[
	cairo_surface_t* ptr = cairo_image_surface_create(lua_tointeger(L, 1),
		lua_tointeger(L, 2), lua_tointeger(L, 3));
		
	priv_struct_new(L, ptr, TRUE, "cairoImageSurfaceMT");
	return 1;
]])

defFunction('cairo_get_size',
	{
		class = 'Context'
	}
)

defOverride('cairo_get_size', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* context =  lua_touserdata(L, 1);

	lua_pushnumber(L, cairo_image_surface_get_width(context->pointer));
	lua_pushnumber(L, cairo_image_surface_get_height(context->pointer));

	return 2;
]])

defOverride('cairo_font_extents_create', [[
	cairo_font_extents_t* ptr = malloc(sizeof(cairo_font_extents_t));
	priv_struct_new(L, ptr, TRUE, "cairoFontExtentsMT");
	
	return 1;
]])

defOverride('cairo_font_extents_destroy',
[[
	Object* obj = lua_touserdata(L, 1);
	
	if(obj->need_unref)
	{
		free(obj->pointer);
		obj->need_unref = FALSE;
	}
	
	return 0;
]])

defOverride('cairo_font_extents_get', [[
	Object* obj = lua_touserdata(L, 1);
	cairo_font_extents_t* ext = obj->pointer;
	
	lua_pushnumber(L, ext->ascent); 
	lua_pushnumber(L, ext->descent); 
	lua_pushnumber(L, ext->height); 
	lua_pushnumber(L, ext->max_x_advance); 
	lua_pushnumber(L, ext->max_y_advance); 
	
	return 5;
]])

defOverride('cairo_text_extents_create', [[
	cairo_text_extents_t* ptr = malloc(sizeof(cairo_text_extents_t));
	priv_struct_new(L, ptr, TRUE, "cairoTextExtentsMT");
	
	return 1;
]])

defOverride('cairo_text_extents_destroy',
[[
	Object* obj = lua_touserdata(L, 1);
	
	if(obj->need_unref)
	{
		free(obj->pointer);
		obj->need_unref = FALSE;
	}
	
	return 0;
]])

defOverride('cairo_text_extents_get', [[
	Object* obj = lua_touserdata(L, 1);
	cairo_text_extents_t* ext = obj->pointer;
	
	lua_pushnumber(L, ext->x_bearing); 
	lua_pushnumber(L, ext->y_bearing); 
	lua_pushnumber(L, ext->width); 
	lua_pushnumber(L, ext->height); 
	lua_pushnumber(L, ext->x_advance); 
	lua_pushnumber(L, ext->y_advance); 
	
	return 6;
]])
