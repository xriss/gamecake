include('gdk.def')
include('pixbuf.def')

undef{
	'GdkDestroyNotify',
	'GdkFont',
	'GdkFontType',
	'GdkSelection',
	'GdkSelectionType',
	'GdkTarget',
	'GdkPixdataDumpType',
	'GdkPixdataType',
	'GdkX11',
	'gdk_x11_font_get_name',
	'gdk_x11_font_get_xdisplay',
	'gdk_x11_font_get_xfont',
	'gdk_x11_ungrab_server',
	'gdk_x11_window_move_to_current_desktop',
	'gdk_keymap_translate_keyboard_state',
	'gdk_net_wm_supports',
	'gdk_x11_display_get_startup_notification_id',
	'gdk_x11_get_server_time',
	'gdk_x11_display_set_cursor_theme',
	'gdk_x11_register_standard_event_type',
	'gdk_x11_display_ungrab',
	'GdkX11',
	'gdk_x11_display_grab',
	'gdk_x11_screen_get_screen_number',
	'gdk_x11_display_get_user_time',
	'gdk_x11_grab_server',
	'gdk_x11_get_default_screen',
	'gdk_x11_screen_get_window_manager_name',
	'gdk_x11_window_set_user_time',
	'gdk_x11_screen_supports_net_wm_hint',
	'gdk_synthesize_window_state',
	'gdk_x11_font_get_name',
	'gdk_event_get_symbol',
	'gdk_pixbuf_from_pixdata',
	'gdk_window_destroy_notify',
	'gdk_x11_atom_to_xatom',
	'gdk_x11_atom_to_xatom_for_display',
	'gdk_x11_colormap_foreign_new',
	'gdk_x11_colormap_get_xcolormap',
	'gdk_x11_colormap_get_xdisplay',
	'gdk_x11_cursor_get_xcursor',
	'gdk_x11_cursor_get_xdisplay',
	'gdk_x11_display_broadcast_startup_message',
	'gdk_x11_display_get_xdisplay',
	'gdk_x11_drawable_get_xdisplay',
	'gdk_x11_drawable_get_xid',
	'gdk_x11_gc_get_xdisplay',
	'gdk_x11_gc_get_xgc',
	'gdk_x11_get_default_root_xwindow',
	'gdk_x11_get_default_xdisplay',
	'gdk_x11_get_xatom_by_name',
	'gdk_x11_get_xatom_by_name_for_display',
	'gdk_x11_get_xatom_name',
	'gdk_x11_get_xatom_name_for_display',
	'gdk_x11_image_get_xdisplay',
	'gdk_x11_image_get_ximage',
	'gdk_x11_lookup_xdisplay',
	'gdk_x11_screen_get_monitor_output',
	'gdk_x11_screen_get_xscreen',
	'gdk_x11_screen_lookup_visual',
	'gdk_x11_visual_get_xvisual',
	'gdk_x11_xatom_to_atom',
	'gdk_x11_xatom_to_atom_for_display',
	'gdk_xid_table_lookup',
	'gdk_xid_table_lookup_for_display',
	'gdkx_visual_get',
	'gdk_device_get_state',
	'gdk_keymap_get_caps_lock_state',
	'gdk_window_freeze_toplevel_updates_libgtk_only',
	'gdk_window_thaw_toplevel_updates_libgtk_only',
	'gdk_pixdata_serialize',
	'gdk_x11_pixmap_get_drawable_impl',
	'gdk_x11_window_get_drawable_impl',
}

fixVersion('gdk_window_get_type_hint', '2.10')
fixVersion('gdk_pixbuf_apply_embedded_orientation', '2.12')
fixVersion('gdk_window_get_root_coords', '2.18')
fixVersion('gdk_window_is_destroyed', '2.18')

-- Hack
local GdkEventType = defEnums.GdkEventType
undefPattern('GdkEvent.+')
defEnum('GdkEventType', GdkEventType)

-- 2.20
undef{
    'gdk_keymap_add_virtual_modifiers',
    'gdk_keymap_map_virtual_modifiers',
    'gdk_pixbuf_non_anim_new',
    'gdk_pixbuf_set_option',
}
undefPattern('.+_compound_text')


defOverride('gdk_color_parse', [[
	GdkColor color;
	gdk_color_parse(lua_tostring(L, 1), &color);
	boxed_new(L, GDK_TYPE_COLOR, &color);
		
	return 1;
]])

defFunction('gdk_pixbuf_scale_simple',
	{
		class = 'GdkPixbuf',
		ret = 'GObject* full constructor',
		args = {'GObject* none', 'int none', 'int none', 'int none'}
	}
)

defFunction('gdk_pixbuf_composite_color_simple',
	{
		class = 'GdkPixbuf',
		ret = 'GObject* full constructor',
		args = {'GObject* none', 'int none', 'int none', 'int none', 'int none', 'int none', 'unsigned int none', 'unsigned int none'}
	}
)

defFunction('gdk_pixbuf_rotate_simple',
	{
		class = 'GdkPixbuf',
		ret = 'GObject* full constructor',
		args = {'GObject* none', 'int none'}
	}
)

defFunction('gdk_pixbuf_flip',
	{
		class = 'GdkPixbuf',
		ret = 'GObject* full constructor',
		args = {'GObject* none', 'boolean none'}
	}
)

defOverride('gdk_cursor_new', [[
	GdkCursor* cur = gdk_cursor_new(lua_tointeger(L, 1));
	special_type_new(L, "gdkCursorMT", cur);
	return 1;
]])

defType('GdkCursor',
	{
		gc = 'gdk_cursor_unref',
	}
)

defFunction('gdk_atom_intern',
	{
		class = 'GdkAtom',
		since = '2.0',
		args = {'char* none', 'boolean none'},
		ret = 'ptraslong full'
	}
)

defFunction('gdk_atom_name',
	{
		class = 'GdkAtom',
		since = '0.1',
		args = {'ptraslong none'},
		ret = 'char* full'
	}
)

defEnum('GdkSpecial',
	{
		['GDK_CURRENT_TIME'] = 0,
	}
)

defOverride('gdk_cairo_create', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	
	cairo_t* ptr = gdk_cairo_create(GDK_DRAWABLE(obj->pointer));
	lua_getfield(L, LUA_REGISTRYINDEX, "cairoContextPush");
	lua_pushlightuserdata(L, ptr);
	lua_pushboolean(L, TRUE);
	lua_call(L, 2, 1);
	
	return 1;
]])

defFunction('gdk_keyval_name',
	{
		since = '2.0',
		args = {'unsigned int none'},
		ret = 'char* none'
	}
)

defFunction('gdk_screen_get_size',
	{
		class = 'GdkScreen'
	}
)

defOverride('gdk_screen_get_size', [[
	luaL_checktype(L, 1, LUA_TUSERDATA);
	Object* obj = lua_touserdata(L, 1);
	
	lua_pushinteger(L, gdk_screen_get_width(obj->pointer));
	lua_pushinteger(L, gdk_screen_get_height(obj->pointer));
	
	return 2;
]])

defFunction('gdk_window_get_handle',
	{
		class = 'GdkWindow'
	}
)

defOverride('gdk_window_get_handle', [[
	Object* obj = lua_touserdata(L, 1);
	lua_pushinteger(L, GET_HANDLER(obj->pointer));

	return 1;
]])

defFunction('gdk_event_motion_get',
	{
	}
)

defOverride('gdk_event_motion_get', [[
	Object* obj = lua_touserdata(L, 1);
	GdkEventMotion* event = obj->pointer;
	
	lua_pushinteger(L, event->time);
	lua_pushinteger(L, event->state);
	lua_pushinteger(L, event->x);
	lua_pushinteger(L, event->y);
	lua_pushboolean(L, event->is_hint);
	
	return 5;
]])

defFunction('gdk_event_any_get',
	{
	}
)

defOverride('gdk_event_any_get', [[
	Object* obj = lua_touserdata(L, 1);
	GdkEventAny* event = obj->pointer;
	
	lua_pushinteger(L, event->type);
	object_new(L, event->window, FALSE);
	lua_pushboolean(L, event->send_event);
	
	return 3;
]])


defFunction('gdk_event_key_get',
	{
	}
)

defOverride('gdk_event_key_get', [[
	Object* obj = lua_touserdata(L, 1);
	GdkEventKey* event = obj->pointer;
	
	lua_pushinteger(L, event->time);
	lua_pushinteger(L, event->state);
	lua_pushinteger(L, event->keyval);
	lua_pushinteger(L, event->length);
	lua_pushinteger(L, event->hardware_keycode);
	lua_pushinteger(L, event->group);
	
	return 6;
]])

defFunction('gdk_event_button_get',
	{
	}
)

defOverride('gdk_event_button_get', [[
	Object* obj = lua_touserdata(L, 1);
	GdkEventButton* event = obj->pointer;
	
	lua_pushinteger(L, event->time);
	lua_pushinteger(L, event->x);
	lua_pushinteger(L, event->y);
	lua_pushinteger(L, event->state);
	lua_pushinteger(L, event->button);
	object_new(L, event->device, FALSE);
	lua_pushinteger(L, event->x_root);
	lua_pushinteger(L, event->y_root);
	
	return 8;
]])

defFunction('gdk_event_expose_get',
	{
	}
)

defOverride('gdk_event_expose_get', [[
	Object* obj = lua_touserdata(L, 1);
	GdkEventExpose* event = obj->pointer;
	lua_pushinteger(L, event->area.x);
	lua_pushinteger(L, event->area.y);
	lua_pushinteger(L, event->area.width);
	lua_pushinteger(L, event->area.height);
	lua_pushinteger(L, event->count);

	return 5;
]])

defOverride('gdk_window_get_pointer', [[
	Object* oarg1 = lua_touserdata(L, 1);
	void* arg1 = oarg1 ? oarg1->pointer : NULL; 

	int arg2;
	int arg3;
	GdkModifierType arg4;
	void* ret = gdk_window_get_pointer(arg1, &arg2, &arg3, &arg4);
	object_new(L, ret, FALSE);
	lua_pushinteger(L, arg2);
	lua_pushinteger(L, arg3);
	lua_pushinteger(L, arg4);
	
	return 4;
]])

defFunction('gdk_keymap_get_caps_lock_state',
	{
		class = 'GdkKeymap',
		since = '2.16',
		args = {'GObject* none'},
		ret = 'boolean none'
	}
)

defEnum('GdkFill',
	{
		['GDK_EXPOSURE_MASK'] = 2,
		['GDK_POINTER_MOTION_MASK']	= 4,
		['GDK_POINTER_MOTION_HINT_MASK'] = 8,
		['GDK_BUTTON_MOTION_MASK'] = 16,
		['GDK_BUTTON1_MOTION_MASK']	= 32,
		['GDK_BUTTON2_MOTION_MASK']	= 64,
		['GDK_BUTTON3_MOTION_MASK']	= 128,
		['GDK_BUTTON_PRESS_MASK'] = 256,
		['GDK_BUTTON_RELEASE_MASK']	= 512,
		['GDK_KEY_PRESS_MASK'] = 1024,
		['GDK_KEY_RELEASE_MASK'] = 2048,
		['GDK_ENTER_NOTIFY_MASK'] = 4096,
		['GDK_LEAVE_NOTIFY_MASK'] = 8192,
		['GDK_FOCUS_CHANGE_MASK'] = 16384,
		['GDK_STRUCTURE_MASK'] = 32768,
		['GDK_PROPERTY_CHANGE_MASK']= 65536,
		['GDK_VISIBILITY_NOTIFY_MASK'] = 131072,
		['GDK_PROXIMITY_IN_MASK'] = 262144,
		['GDK_PROXIMITY_OUT_MASK'] = 524288,
		['GDK_SUBSTRUCTURE_MASK'] = 1048576,
		['GDK_SCROLL_MASK'] = 2097152,
		['GDK_ALL_EVENTS_MASK'] = 0x3FFFFE,
	}
)

defFunction('gdk_drag_get_protocol',
	{
		since = '0.1',
		args = {'unsigned int none', 'unsigned int* full'},
		ret = 'unsigned int full'
	}
)

defFunction('gdk_window_get_decorations',
	{
		class = 'GdkWindow',
		since = '0.1',
		args = {'GObject* none', 'unsigned int* full'},
		ret = 'boolean none'
	}
)

defFunction('gdk_event_get_state',
	{
		class = 'GdkEvent',
		since = '0.1',
		args = {'struct* none', 'unsigned int* full'},
		ret = 'boolean none'
	}
)

defFunction('gdk_drag_get_protocol_for_display',
	{
		since = '2.2',
		args = {'GObject* none', 'unsigned int none', 'unsigned int* full'},
		ret = 'unsigned int full'
	}
)

defFunction('gdk_pixbuf_render_pixmap_and_mask',
    {
        class = 'GdkPixbuf'
    }
)

defOverride('gdk_pixbuf_render_pixmap_and_mask', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TNUMBER);
    
    Object* obj = lua_touserdata(L, 1);
    GdkPixmap* pix;
    GdkBitmap* map;
    
    gdk_pixbuf_render_pixmap_and_mask(obj->pointer, &pix, &map, 
        lua_tointeger(L, 2));
    
    object_new(L, pix, TRUE);
    object_new(L, map, TRUE);
    
    return 2;
]])

defFunction('gdk_rectangle_get',
    {
        class = 'GdkRectangle'
    }
)

defOverride('gdk_rectangle_get', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    Object* obj = lua_touserdata(L, 1);
    GdkRectangle* rect = obj->pointer;
    
    lua_pushinteger(L, rect->x);
    lua_pushinteger(L, rect->y);
    lua_pushinteger(L, rect->width);
    lua_pushinteger(L, rect->height);
    
    return 4;
]])

defFunction('gdk_rectangle_set',
    {
        class = 'GdkRectangle'
    }
)

defOverride('gdk_rectangle_set', [[
    luaL_checktype(L, 1, LUA_TUSERDATA);
    luaL_checktype(L, 2, LUA_TNUMBER);
    luaL_checktype(L, 3, LUA_TNUMBER);
    luaL_checktype(L, 4, LUA_TNUMBER);
    luaL_checktype(L, 5, LUA_TNUMBER);
    
    Object* obj = lua_touserdata(L, 1);
    GdkRectangle* rect = obj->pointer;
    
    rect->x = lua_tointeger(L, 2);
    rect->y = lua_tointeger(L, 3);
    rect->width = lua_tointeger(L, 4);
    rect->height = lua_tointeger(L, 5);
    
    return 0;
]])

defFunction('gdk_rectangle_new',
    {
        class = 'GdkRectangle',
    }
)

defOverride('gdk_rectangle_new', [[
    GdkRectangle rect = {0, 0, 0, 0};
    boxed_new(L, GDK_TYPE_RECTANGLE, &rect);
    return 1; 
]])

defOverride('gdk_pixbuf_save', [[
    Object* obj      = lua_touserdata(L, 1);
    const char* file = lua_tostring(L, 2);
    const char* type = lua_tostring(L, 3);
    char **keys, **values;
    pixbuf_options(L, 4, &keys, &values);
    
    GError* error = NULL;
    gdk_pixbuf_savev(obj->pointer, file, type, keys, values, &error);
        
    if(keys)
    {
        g_free(keys);
        g_free(values);
    }
    
    if(error)
	{
		lua_pushboolean(L, FALSE);
		lua_pushinteger(L, error->code);
		lua_pushstring (L, error->message);
		g_error_free(error);
		return 3;
	}
    
    lua_pushboolean(L, TRUE);
    return 1;
]])

defOverride('gdk_pixbuf_save_to_buffer', [[
    Object* obj      = lua_touserdata(L, 1);
    const char* type = lua_tostring(L, 2);
    char **keys, **values;
    pixbuf_options(L, 3, &keys, &values);
    
    gchar* buffer;
    gsize size;
    GError* error = NULL;
    
    gdk_pixbuf_save_to_bufferv(obj->pointer, &buffer, &size, type, keys, values,
        &error);
        
    if(keys)
    {
        g_free(keys);
        g_free(values);
    }
    
    if(error)
	{
		lua_pushboolean(L, FALSE);
		lua_pushinteger(L, error->code);
		lua_pushstring (L, error->message);
		g_error_free(error);
		return 3;
	}
    
    lua_pushboolean(L, TRUE);
    lua_pushlstring(L, buffer, size);
    lua_pushinteger(L, size);
    g_free(buffer); /* if there's an error then buffer will be NULL */
    
    return 3;
]])
