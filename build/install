#!/usr/bin/env bash


if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  echo "This script requires bash >= 4"
  exit 1
fi


cd `dirname $0`

trap ' trap - INT ;  kill -s INT "$$" ' INT


# first install a require script
if ! [[ -x "$(command -v require.sh)" ]] ; then

	echo " we need sudo to install require.sh to /usr/local/bin "
	sudo wget -O /usr/local/bin/require.sh https://raw.githubusercontent.com/xriss/require.sh/main/require.sh
	sudo chmod +x /usr/local/bin/require.sh

fi

arg_flags=("luajit=git sdl2=2.28.1 help mingw android")

arg_get() {
key="$1"
	envkey=${key//-/_}
	if printenv BUILDINSTALL_${envkey^^} ; then
		return 0
	fi
	return 20
}

arg_set() {
key="$1"
val="$2"
	envkey=${key//-/_}
	export BUILDINSTALL_${envkey^^}="$val"
}

#parse arg_flags
declare -A all_flaga
declare -A value_flaga
declare -A boolean_flaga
for flag in $arg_flags ; do
	if [[ "${flag}" == *"="* ]]; then
		fs=(${flag//=/ })
		boolean_flaga[${fs[0]}]="1"
		all_flaga[${fs[0]}]="1"
		if arg_get ${fs[0]} >/dev/null ; then
			:
		else
			arg_set "${fs[0]}" "${fs[1]}"
		fi
	else
		fs=(${flag//:/ })
		boolean_flaga[${fs[0]}]="1"
		all_flaga[${fs[0]}]="1"
		if arg_get ${fs[0]} >/dev/null ; then
			:
		else
			arg_set "${fs[0]}" "${fs[1]}"
		fi
	fi
done

# fill in these arrays as output
declare -A args
declare -A flags
mode="names"
for arg in "$@" ; do

	case $mode in

		"set")
			val="$arg"
			flags["$set"]="$val"
			mode="names"
		;;

		"done")
			args[${#args[@]}]="$arg"
		;;

		*)
			if [[ "$arg" = "--" ]] ; then # just a -- so stop parsing
				mode="done"
			elif [[ "${arg:0:5}" = "--no-" ]] ; then # unset a flag
				set="${arg:5}"
				flags["$set"]=""
			elif [[ "${arg:0:2}" = "--" ]] ; then # begins with --
			
				set="${arg:2}"
				if [[ "$set" == *"="* ]] ; then # --var=val
					a=(${set//=/ })
					set="${a[0]}"
					val="${a[1]}"
					flags["$set"]="$val"
				else # --var val
					if [[ ${boolean_flaga[$set]} ]] ; then # no val expected
						flags["$set"]="1"
					else
						flags["$set"]="1" # temporary value
						mode="set"
					fi
				fi
			else
				args[${#args[@]}]="$arg"
			fi
		;;

	esac

done


# process flags we found here and probably overwrite env vars

#if [[ -z "${args[0]}"  ]] ; then # print help if no names
#	arg_set HELP 1
#fi

for key in "${!flags[@]}" ; do
	val=${flags[$key]}
	if [[ ${all_flaga[$key]} ]] ; then
		arg_set $key "$val"
	else
		echo "unknown flag $key=$val"
		exit 20
	fi
done


if [[ -n "$( arg_get help )" ]] ; then
	cat <<EOF

Available options are :

	./make --mingw     # enable mingw crosscompile
	./make --android   # enable android crosscompile

	./make --luajit=   # disable luajit
	./make --sdl2=     # disable sdl2

EOF

exit 0

fi

# install build dependencies using require.sh

if [[ -n "$( arg_get mingw )" ]] ; then
	require.sh mingw-w64
fi

#looks like debian is confusing us with a 2 ?
require.sh luajit2
require.sh luajit

require.sh lua-filesystem

require.sh git
require.sh wget
require.sh unzip
require.sh make
require.sh gcc-libs
require.sh gcc-multilib
require.sh g++-multilib

if [[ -z "$( arg_get android )" ]] ; then

	require.sh automake
	require.sh clang
	require.sh mercurial
	require.sh cmake
	require.sh autoconf
	require.sh automake
	require.sh libtool

	require.sh /usr/include/readline/readline.h
	require.sh /usr/include/GL/gl.h
	require.sh /usr/include/X11/X.h
	require.sh /usr/include/alsa/asoundlib.h
	require.sh /usr/include/libudev.h
	require.sh /usr/include/pulse/pulseaudio.h
	require.sh /usr/include/luajit-2.0/lua.h
	require.sh /usr/include/luajit-2.1/lua.h
	require.sh /usr/include/SDL2/SDL.h
	require.sh /usr/include/openssl/ssl.h

	require.sh /usr/include/FreeImage.h
	require.sh /usr/include/AL/al.h
	require.sh /usr/include/pango-1.0/pango/pango.h
	require.sh /usr/include/sndfile.h
	require.sh /usr/include/jpeglib.h
	require.sh /usr/include/webp/decode.h
	require.sh /usr/include/sndio.h

	require.sh /usr/include/X11/extensions/extutil.h
	require.sh /usr/include/X11/extensions/Xrandr.h
	require.sh /usr/include/X11/Xcursor/Xcursor.h
	require.sh /usr/include/X11/extensions/XInput.h
	require.sh /usr/include/X11/extensions/Xinerama.h
	require.sh /usr/include/X11/extensions/xf86vmode.h
	require.sh /usr/include/X11/extensions/scrnsaver.h
	require.sh /usr/include/dbus-1.0/dbus/dbus.h
	require.sh /usr/include/GLES/gl.h
	require.sh /usr/include/GLES2/gl2.h
	require.sh /usr/include/GLES3/gl3.h
	require.sh /usr/include/EGL/egl.h
	require.sh /usr/include/ibus-1.0/ibus.h
	require.sh /usr/include/wayland-client.h
	require.sh /usr/include/xkbcommon/xkbcommon.h

fi

# make a version of luajit and install it

if [ ! -z "$( arg_get luajit )" ]; then

	if [ "$( arg_get luajit )" = "git" ]; then

		echo "using latest git"

		git clone https://luajit.org/git/luajit.git && cd luajit || cd luajit && git pull

	else

		if [ -f $( arg_get luajit ).tar.gz ] ; then
			echo "using $( arg_get luajit ).tar.gz"
		else
			wget -O $( arg_get luajit ).tar.gz https://luajit.org/download/$( arg_get luajit ).tar.gz
		fi

		rm -rf $( arg_get luajit )
		tar zxvf $( arg_get luajit ).tar.gz
		cd $( arg_get luajit )

	fi

	if [ ! -z "$( arg_get android )" ]; then

		mkdir -p ../../exe/android/include
		cp src/lua*.h ../../exe/android/include
		cp src/lauxlib.h ../../exe/android/include

		make clean
		make amalg \
			HOST_CC="gcc -m32" \
			     CROSS="arm-linux-androideabi-" \
			 STATIC_CC="armv7a-linux-androideabi29-clang -fPIC" \
			DYNAMIC_CC="armv7a-linux-androideabi29-clang -fPIC" \
			 TARGET_LD="armv7a-linux-androideabi29-clang" \
			 TARGET_AR="arm-linux-androideabi-ar rcus" \
		  TARGET_STRIP="arm-linux-androideabi-strip" \
			TARGET_SYS=Linux BUILDMODE=static
		mkdir -p ../../exe/android/lib/armeabi-v7a
		cp src/libluajit.a ../../exe/android/lib/armeabi-v7a/
			
		make clean
		make amalg \
			HOST_CC="gcc -m64" \
			     CROSS="aarch64-linux-android29-" \
			 STATIC_CC="aarch64-linux-android29-clang -fPIC" \
			DYNAMIC_CC="aarch64-linux-android29-clang -fPIC" \
			 TARGET_LD="aarch64-linux-android29-clang" \
			 TARGET_AR="aarch64-linux-android-ar rcus" \
		  TARGET_STRIP="aarch64-linux-android-strip" \
			TARGET_SYS=Linux BUILDMODE=static
		mkdir -p ../../exe/android/lib/arm64-v8a
		cp src/libluajit.a ../../exe/android/lib/arm64-v8a/

		make clean
		make amalg \
			HOST_CC="gcc -m32" \
			     CROSS="i686-linux-android29-" \
			 STATIC_CC="i686-linux-android29-clang -fPIC" \
			DYNAMIC_CC="i686-linux-android29-clang -fPIC" \
			 TARGET_LD="i686-linux-android29-clang" \
			 TARGET_AR="i686-linux-android-ar rcus" \
		  TARGET_STRIP="i686-linux-android-strip" \
			TARGET_SYS=Linux BUILDMODE=static
		mkdir -p ../../exe/android/lib/x86
		cp src/libluajit.a ../../exe/android/lib/x86/

		make clean
		make amalg \
			HOST_CC="gcc -m64" \
			     CROSS="x86_64-linux-android29-" \
			 STATIC_CC="x86_64-linux-android29-clang -fPIC" \
			DYNAMIC_CC="x86_64-linux-android29-clang -fPIC" \
			 TARGET_LD="x86_64-linux-android29-clang" \
			 TARGET_AR="x86_64-linux-android-ar rcus" \
		  TARGET_STRIP="x86_64-linux-android-strip" \
			TARGET_SYS=Linux BUILDMODE=static
		mkdir -p ../../exe/android/lib/x86_64
		cp src/libluajit.a ../../exe/android/lib/x86_64/


	elif [ ! -z "$( arg_get mingw )" ]; then
	
		make clean
		make amalg HOST_CC="gcc -m32" CROSS=i686-w64-mingw32- TARGET_SYS=Windows BUILDMODE=static

		sudo mkdir -p /usr/i686-w64-mingw32/include/luajit
		sudo cp src/lua*.h /usr/i686-w64-mingw32/include/luajit
		sudo cp src/lauxlib.h /usr/i686-w64-mingw32/include/luajit
		
		sudo cp src/libluajit.a /usr/i686-w64-mingw32/lib
		
	elif [ "`uname`" = "Darwin" ] ; then

		sudo mkdir -p /usr/local/64
		make clean
		make amalg -j$(nproc||echo 1) CC="gcc -m64" && sudo make install PREFIX=/usr/local/64

	else

		make clean
		make amalg -j$(nproc||echo 1) && sudo make install

	fi

	cd ..


	#force static link by deleting the .so or dylib

	sudo rm -f /usr/local/lib/libluajit-5.1.so
	sudo rm -f /usr/local/64/lib/libluajit-5.1.dylib
	sudo rm -f /usr/local/lib/libluajit-5.1.dylib

fi


# make a version of SDL2 and install it

if [ ! -z "$( arg_get sdl2 )" ]; then

	if [ ! -z "$( arg_get android )" ]; then


		if [ -f SDL2-$( arg_get sdl2 ).tar.gz ] ; then
			echo "using SDL2-$( arg_get sdl2 ).tar.gz"
		else
			wget -O SDL2-$( arg_get sdl2 ).tar.gz https://www.libsdl.org/release/SDL2-$( arg_get sdl2 ).tar.gz
		fi

		rm -rf SDL2-$( arg_get sdl2 )
		tar zxvf SDL2-$( arg_get sdl2 ).tar.gz
		cd SDL2-$( arg_get sdl2 )


		ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=./Android.mk APP_PLATFORM=android-29

		mkdir -p ../../exe/android/lib
		cp -r libs/* ../../exe/android/lib

		mkdir -p ../../exe/android/include
		cp -r include/* ../../exe/android/include

		cd ..


	elif [ ! -z "$( arg_get mingw )" ]; then

		if [ -f SDL2-devel-$( arg_get sdl2 ).tar.gz ] ; then
			echo "using SDL2-devel-$( arg_get sdl2 ).tar.gz"
		else
			wget -O SDL2-devel-$( arg_get sdl2 ).tar.gz https://www.libsdl.org/release/SDL2-devel-$( arg_get sdl2 )-mingw.tar.gz
		fi
	
		rm -rf SDL2-$( arg_get sdl2 )
		tar zxvf SDL2-devel-$( arg_get sdl2 ).tar.gz
		cd SDL2-$( arg_get sdl2 )
		
		sudo cp -r i686-w64-mingw32/ /usr/

		# force static link by deleting any dynamic versions
		sudo rm -f /usr/i686-w64-mingw32/lib/libSDL2.so
		sudo rm -f /usr/i686-w64-mingw32/lib/libSDL2.dylib
		sudo rm -f /usr/i686-w64-mingw32/lib/libSDL2.dll.a

		cd ..
		
	else

		if [ -f SDL2-$( arg_get sdl2 ).tar.gz ] ; then
			echo "using SDL2-$( arg_get sdl2 ).tar.gz"
		else
			wget -O SDL2-$( arg_get sdl2 ).tar.gz https://www.libsdl.org/release/SDL2-$( arg_get sdl2 ).tar.gz
		fi

		rm -rf SDL2-$( arg_get sdl2 )
		tar zxvf SDL2-$( arg_get sdl2 ).tar.gz
		cd SDL2-$( arg_get sdl2 )


		./configure --enable-static --disable-esd --disable-arts --disable-video-directfb --disable-rpath --enable-alsa --enable-alsa-shared --enable-pulseaudio --enable-pulseaudio-shared --enable-x11-shared --enable-sdl-dlopen --disable-input-tslib --disable-render-metal --disable-sndio --disable-video-rpi

		make -j$(nproc||echo 1)
		sudo make install
		cd ..

		# force static link by deleting any dynamic versions
		sudo rm -f /usr/local/lib/libSDL2.so

		cd ..

	fi
fi

