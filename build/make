#!/bin/bash
cd `dirname $0`
cd ..

getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo " gamecake make script failed : we need a working version of getopt "
    exit 1
fi


# default build settings


release=1

# defaults to a release build


gcc=gcc

# other options are : gcc clang emcc windows osx 


cpu=native

# other options are : native 32 64

jobs=$(nproc||echo 1)

# use --jobs=1 to prevent parallel builds

openal=soft

# other options are : soft sys


OPTIONS=
LONGOPTIONS=help,debug,release,clean,gcc:,cpu:,win:,openal:,jobs:



PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"

while true; do
case "$1" in
        --help)
                help=1
                shift
        ;;
        --debug)
                debug=1
                shift
        ;;
        --release)
                release=1
                shift
        ;;
        --clean)
                clean=1
                shift
        ;;
        --gcc)
                gcc="$2"
                shift 2
        ;;
        --jobs)
                jobs="$2"
                shift 2
        ;;
        --cpu)
                cpu="$2"
                shift 2
        ;;
        --win)
                win="$2"
                shift 2
        ;;
        --openal)
                openal="$2"
                shift 2
        ;;
        --)
                shift
                break
        ;;
        *)
                echo "Programming error"
                exit 3
        ;;
esac
done

if [ "$help" = "1" ] ; then

echo "debug: $debug, release: $release, clean: $clean, gcc: $gcc, cpu: $cpu, win: $win, openal: $openal, makeargs: $*"

echo " Available options are : "
echo
echo " ./make --release    # perform a release build (default) "
echo " ./make --debug      # or perform a debug build "
echo
echo " ./make --clean      # delete objects and force a full rebuild "
echo
echo " ./make --jobs=1     # build one thing at a time "
echo
echo " ./make --gcc=gcc    # normal nix build using gcc (default) "
echo " ./make --gcc=clang  # alternative nix build using clang "
echo " ./make --gcc=emcc   # build using emscripten "
echo
echo " ./make --cpu=native # use the host cpu (default) "
echo " ./make --cpu=32     # force a 32bit build "
echo " ./make --cpu=64     # force a 64bit build "
echo
echo " ./make --win=raspi  # force the use of the raspi os interface "
echo
echo " ./make --openal=sys  # use system provided openal "
echo

exit 0

fi



if [ "$gcc" = "emcc" ] ; then

emcc --version >/dev/null || . build/emsdk/emsdk_env.sh

fi




buildhere=build-gmake-$gcc-$cpu

echo BUILDING INTO $buildhere



export GAMECAKE_WIN_TYPE=$win



#remove all files and perform a clean build

if [ "$clean" = "1" ] ; then

echo cleaning ${buildhere}

rm -rf ${buildhere}

fi






#default to release and override with debug if selected

makeopts="config=release_$gcc"

if [ "$debug" = "1" ] ; then

makeopts="config=debug_$gcc"

fi




# this will make a directory to build into

if [ -z "$PUREMAKE_LUA" ]; then 
 if lua -e "require('lfs')" >/dev/null 2>&1; then
  PUREMAKE_LUA=lua
 elif gamecake -e "require('lfs')" >/dev/null 2>&1; then 
  PUREMAKE_LUA=gamecake
 elif command -v luajit >/dev/null 2>&1; then
  PUREMAKE_LUA=luajit
 else
  printf "puremake requires lua+lfs or gamecake or luajit to be installed\n" 1>&2
  exit 1
 fi
fi

$PUREMAKE_LUA build/puremake --openal=$openal gmake $gcc-$cpu

# enter that directory
cd ${buildhere}



if [ "$*" = "clean" ] ; then

make -j$jobs $makeopts clean
make -j$jobs $makeopts

else

make -j$jobs $makeopts $*

fi


