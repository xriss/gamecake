#!/usr/bin/env bash

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  echo "This script requires bash >= 4"
  exit 1
fi


cd `dirname $0`
cd ..

core_jobs=$(nproc||sysctl -n hw.logicalcpu||echo 1)
set_gcc=gcc
set_cpu=native

if [ $(uname) = "Darwin" ] ; then
set_gcc=osx
set_cpu=x64
fi

arg_flags=("help debug release:1 clean gcc=$set_gcc cpu=$set_cpu win= openal=soft jobs=$core_jobs")

arg_get() {
key="$1"
	envkey=${key//-/_}
	if printenv BUILD_${envkey^^} ; then
		return 0
	fi
	return 20
}

arg_set() {
key="$1"
val="$2"
	envkey=${key//-/_}
	export BUILD_${envkey^^}="$val"
}

#parse arg_flags
declare -A all_flaga
declare -A value_flaga
declare -A boolean_flaga
for flag in $arg_flags ; do
	if [[ "${flag}" == *"="* ]]; then
		fs=(${flag//=/ })
		value_flaga[${fs[0]}]="1"
		all_flaga[${fs[0]}]="1"
		if arg_get ${fs[0]} >/dev/null ; then
			:
		else
			arg_set "${fs[0]}" "${fs[1]}"
		fi
	else
		fs=(${flag//:/ })
		boolean_flaga[${fs[0]}]="1"
		all_flaga[${fs[0]}]="1"
		if arg_get ${fs[0]} >/dev/null ; then
			:
		else
			arg_set "${fs[0]}" "${fs[1]}"
		fi
	fi
done

# fill in these arrays as output
declare -A args
declare -A flags
mode="names"
for arg in "$@" ; do

echo $arg

	case $mode in

		"set")
			val="$arg"
			flags["$set"]="$val"
			mode="names"
		;;

		"done")
			args[${#args[@]}]="$arg"
		;;

		*)
			if [[ "$arg" = "--" ]] ; then # just a -- so stop parsing
				mode="done"
			elif [[ "${arg:0:5}" = "--no-" ]] ; then # unset a flag
				set="${arg:5}"
				flags["$set"]=""
			elif [[ "${arg:0:2}" = "--" ]] ; then # begins with --
			
				set="${arg:2}"
				if [[ "$set" == *"="* ]] ; then # --var=val
					a=(${set//=/ })
					set="${a[0]}"
					val="${a[1]}"
					flags["$set"]="$val"
				else # --var val
					if [[ ${boolean_flaga[$set]} ]] ; then # no val expected
						flags["$set"]="1"
					else
						flags["$set"]="1" # temporary value
						mode="set"
					fi
				fi
			else
				args[${#args[@]}]="$arg"
			fi
		;;

	esac

done

# process flags we found here and probably overwrite env vars

for key in "${!flags[@]}" ; do
	val=${flags[$key]}

	if [[ ${all_flaga[$key]} ]] ; then
		arg_set "${key}" "$val"
	else
		echo "unknown flag $key=$val"
		exit 20
	fi

done


if [[ -n "$( arg_get help )" ]] ; then

cat <<EOF

Available options are :

./make --release     # perform a release build (default)
./make --debug       # or perform a debug build

./make --clean       # delete objects and force a full rebuild

./make --jobs=1      # build one thing at a time

./make --gcc=gcc     # normal nix build using gcc (default)
./make --gcc=clang   # alternative nix build using clang
./make --gcc=emcc    # build using emscripten
./make --gcc=android # build using android
./make --gcc=osx     # build using osx clang

./make --cpu=native  # use the host cpu (default)
./make --cpu=x32     # force a 32bit build
./make --cpu=x64     # force a 64bit build
./make --cpu=a32     # force a 32bit arm build
./make --cpu=a64     # force a 64bit arm build

./make --win=raspi   # force the use of the raspi os interface

./make --openal=sys  # use system provided openal


EOF

exit 0

fi



if [ "$( arg_get gcc )" = "emcc" ] ; then

emcc --version >/dev/null || . build/emsdk/emsdk_env.sh

fi



buildhere=build-gmake-$( arg_get gcc )-$( arg_get cpu )

echo BUILDING INTO $buildhere



export GAMECAKE_WIN_TYPE=$( arg_get win )



#remove all files and perform a clean build

if [[ -n "$( arg_get clean )" ]] ; then

echo cleaning ${buildhere}

rm -rf ${buildhere}

fi






#default to release and override with debug if selected

makeopts="config=release"

if [[ -n "$( arg_get debug )" ]] ; then

makeopts="config=debug"

fi

# need to include cpu in android builds
#if [[ "$( arg_get gcc )" = "android" ]] ; then
#makeopts="$makeopts-$( arg_get cpu )"
#fi



# this will make a directory to build into

if [[ -z "$PUREMAKE_LUA" ]]; then 
 if lua -e "require('lfs')" >/dev/null 2>&1; then
  PUREMAKE_LUA=lua
 elif command -v luajit >/dev/null 2>&1; then
  PUREMAKE_LUA=luajit
 elif gamecake -e "require('lfs')" >/dev/null 2>&1; then 
  PUREMAKE_LUA=gamecake
 else
  printf "puremake requires lua+lfs or gamecake or luajit to be installed\n" 1>&2
  exit 1
 fi
fi


echo "$PUREMAKE_LUA build/puremake --openal=$( arg_get openal ) gmake $( arg_get gcc )-$( arg_get cpu )"
$PUREMAKE_LUA build/puremake --openal=$( arg_get openal ) gmake $( arg_get gcc )-$( arg_get cpu )

# enter that directory
cd ${buildhere}

# what is about to happen
echo ${buildhere} / make $makeopts

if [[ -n "$( arg_get clean )" ]] ; then

echo " make -j$( arg_get jobs ) $makeopts "

make -j$( arg_get jobs ) $makeopts clean
make -j$( arg_get jobs ) $makeopts

else

echo " make -j$( arg_get jobs ) $makeopts "
make -j$( arg_get jobs ) $makeopts

fi


